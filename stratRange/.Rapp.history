orthids <- read.delim(file="https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Dicoelosia,Protocortezorthis,Ptychopleurella,Resserella,Salopina,Schizophoria,Skenidioides&rel=all_parents&show=app&rank=genus")#
quartz()#
par(mar=c(7.5,4,0.5,0.5), las=2)#
plot(1:10, type="n", xlim=c(1,7), ylim=rev(range(c(orthids$firstapp_max_ma, orthids$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
segments(1:7, orthids$firstapp_max_ma, 1:7, orthids$lastapp_min_ma, lwd=3)#
axis(side=1, at=1:7, labels=orthids$taxon_name)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see graphs appear", style="color:red"),#
			br(),#
			# select environment#
			selectText(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		pbdb <- read.delim(file=paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxonSelection,"&rel=all_parents&show=app&rank=genus"))#
#
		par(mar=c(7.5,4,0.5,0.5), las=2)#
		plot(1:10, type="n", xlim=c(1,7), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nrow(pbdb), pbdb$firstapp_max_ma, 1:nrow(pbdb), pbdb$lastapp_min_ma, lwd=3)#
		axis(side=1, at=1:7, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see graphs appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		pbdb <- read.delim(file=paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxonSelection,"&rel=all_parents&show=app&rank=genus"))#
#
		par(mar=c(7.5,4,0.5,0.5), las=2)#
		plot(1:10, type="n", xlim=c(1,7), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nrow(pbdb), pbdb$firstapp_max_ma, 1:nrow(pbdb), pbdb$lastapp_min_ma, lwd=3)#
		axis(side=1, at=1:7, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see graphs appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		pbdb <- read.delim(file=paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rel=all_parents&show=app&rank=genus"))#
#
		par(mar=c(7.5,4,0.5,0.5), las=2)#
		plot(1:10, type="n", xlim=c(1,7), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nrow(pbdb), pbdb$firstapp_max_ma, 1:nrow(pbdb), pbdb$lastapp_min_ma, lwd=3)#
		axis(side=1, at=1:7, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see graphs appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		pbdb <- read.delim(file=paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rel=all_parents&show=app&rank=genus"))#
		nTaxa <- nrow(pbdb)#
		par(mar=c(7.5,4,0.5,0.5), las=2)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb$firstapp_max_ma, 1:nTaxa, pbdb$lastapp_min_ma, lwd=3)#
		axis(side=1, at=1:nTaxa, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?URLencode
?sub
sub(", ", ",", "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see graphs appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rel=all_parents&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri)#
		nTaxa <- nrow(pbdb)#
		par(mar=c(7.5,4,0.5,0.5), las=2)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb$firstapp_max_ma, 1:nTaxa, pbdb$lastapp_min_ma, lwd=3)#
		axis(side=1, at=1:nTaxa, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rel=all_parents&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri)#
		nTaxa <- nrow(pbdb)#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb$firstapp_max_ma, 1:nTaxa, pbdb$lastapp_min_ma, lwd=3)#
		axis(side=1, at=1:nTaxa, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter Taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	output$rangePlot <- renderPlot({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rel=all_parents&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri)#
		nTaxa <- nrow(pbdb)#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb$firstapp_max_ma, 1:nTaxa, pbdb$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
pbdb
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Elrathia,Olenellus&rel=all_parents&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri)
pbdb
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Elrathia,Olenellus&rel=all_parents&show=app,class&rank=genus"))#
		pbdb <- read.delim(file=uri)
pbdb
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Elrathia,Olenellus&rel=all_parents&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri)
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Elrathia,Olenellus&rel=all_parents&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri); pbdb
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Elrathia,Olenellus&show=app&rank=genus"))#
		pbdb <- read.delim(file=uri); pbdb
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&show=class,app&rank=",input$taxonReso))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb$firstapp_max_ma, 1:nTaxa, pbdb$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			#fluidRow(#
			#	plotOutput(outputId = "rangePlot")#
			#),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&show=class,app&rank=",input$taxonReso))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb$firstapp_max_ma, pbdb$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb$firstapp_max_ma, 1:nTaxa, pbdb$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			#fluidRow(#
			#	plotOutput(outputId = "rangePlot")#
			#),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&show=class,app&rank=",input$taxonReso))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
}#
#
shinyApp(ui = ui, server = server)
pbdb
colnames(pbdb)
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Elrathia,Olenellus&show=app,class&rank=genus"))#
		pbdb <- read.delim(file=uri); pbdb
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&show=class,app&rank=",input$taxonReso))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		pbdbTable <- pbdb()[,match(c("phylum","class","order","family","accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
x <- c("phylum","class","order","family")
x[x > "class"]
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Bivalvia,Trilobita&show=app,class&rank=Order"))#
		pbdb <- read.delim(file=uri); pbdb
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Bivalvia,Trilobita&show=app,class&rank=order"))#
		pbdb <- read.delim(file=uri); pbdb
hier <- "phylum"
hier[-(length(hier))]
c(hier[-(length(hier))], "accpet")
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&show=class,app&order=hierarchy,firstapp&rank=",input$taxonReso))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier[-(length(hier))],input$taxonReso,"FAD ","FAD Ma","LAD","LAD Ma")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&show=class,app&order=hierarchy,firstapp&rank=",input$taxonReso))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier[-(length(hier))],input$taxonReso,"FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Bivalvia,Gastropoda&show=app,class&rank=class"))#
		pbdb <- read.delim(file=uri); pbdb
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"FAD ","FAD Ma","LAD","LAD Ma")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"FAD ","FAD Ma","LAD","LAD Ma")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot")#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"FAD ","FAD Ma","LAD","LAD Ma")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"FAD ","FAD Ma","LAD","LAD Ma")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",input$taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma))), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"FAD ","FAD Ma","LAD","LAD Ma")#
	})#
}#
#
shinyApp(ui = ui, server = server)
?colnames
hier <- c("phylum","class",)
pbdb <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Bivalvia,%20Gastropoda,Arthropoda&rank=class&taxon_status=accepted&show=class,app&order=hierarchy,firstapp")
pbdb
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- sub(", ", ",", input$taxa)#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?sub
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(sub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(sub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(sub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(sub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		#pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		#data.frame(pbdbTable, check.names=FALSE)#
		pbdb()#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(sub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(sub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?sub
?sub
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma")#
		#pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))#
		#pbdbTable <- pbdb()[,match(c(hier[-(length(hier))],"accepted_name","n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
head(pbdb)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma", )#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
x <- read.delim(file="https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlichia,Elrathia,Flexicalymene,Phacops,Kathwaia&rank=family&taxon_status=accepted&show=class,app&order=hierarchy,firstapp")
x
nrow(x)
x <- read.delim(file="https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlichia,Elrathia,Flexicalymene,Phacops,Kathwaia&rank=family&rel=all_parents&taxon_status=accepted&show=class,app&order=hierarchy,firstapp")
x
x <- read.delim(file="https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlichia,Elrathia,Flexicalymene,Phacops,Kathwaia&rank=class&rel=all_parents&taxon_status=accepted&show=class,app&order=hierarchy,firstapp"); x
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		hier <- c("phylum","class","order","family","genus","species")#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelections <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("phylum","class","order","family","genus","species"),#
				selected = "genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("phylum","class","order","family","genus","species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("phylum","class","order","family","genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("phylum","class","order","family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("phylum","class","order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("phylum","class",)#
		} else {#
			hier <- c("phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",input$taxonReso,"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
x <- read.delim("THIS REQUEST RETURNED NO RECORDS")
x <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlichia,Elrathia,Flexicalymene,Phacops,Kathwaia&rank=species&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp#
")
x <- read.delim(file="https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlichia,Elrathia,Flexicalymene,Phacops,Kathwaia&rank=species&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp#
")
x
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri <- class(pbdb())#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		uri <- nrow(pbdb())#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?text
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,5 labels="Error: Check to make sure taxon names are spelled correctly\nand that the taxa entered are at least at the level of resolution selected.")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,5 labels="Error: Check to make sure taxon names are spelled correctly\nand that the taxa entered are at least at the level of resolution selected.")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,5 labels="Error: Check to make sure taxon names are spelled correctly\\nand that the taxa entered are at least at the level of resolution selected.")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,5 labels="Error: Check to make sure taxon names are spelled correctly\\\nand that the taxa entered are at least at the level of resolution selected.")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6 labels="Error: Check to make sure taxon names are spelled correctly.")#
			text(5,4 labels="and that the taxa entered are at least at the level of resolution selected.")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?TEXT
?text
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6 labels="Error: Check spelling of taxon names")#
			text(5,4 labels="and that the taxa entered are at least the level of resolution selected")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6 labels="Error: Check spelling of taxon names")#
			text(5,4 labels="and that the taxa entered are at least the level of resolution selected")
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon names\nand that the taxa entered are at least the level of resolution selected.")#
			#text(5,4, labels="")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		pbdbReturn <- subset(pbdb(), n_occs >= 1 )#
		nTaxa <- nrow(pbdbReturn)#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdbReturn$firstapp_max_ma, pbdbReturn$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdbReturn$firstapp_max_ma, 1:nTaxa, pbdbReturn$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdbReturn$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon names\nand that the taxa entered are at least the level of resolution selected.")#
			#text(5,4, labels="")#
		}#
	})#
	output$rangeTable <- renderTable({#
		pbdbReturn <- subset(pbdb(), n_occs >= 1 )#
#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbReturn#
		#pbdbTable <- pbdbReturn[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdbReturn))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon names\nand that the taxa entered are at least the level of resolution selected.")#
			#text(5,4, labels="")#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=3, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		#if(nrow(pbdbReturn) > 0) {#
		#	pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		#}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & is.element("n_occs", colnames(pbdbReturn))) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?grepl
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", nTaxa[1,])) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
x
print(x)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb(), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
x
grepl("Trilobita",x)
max(grepl("Trilobita",x))
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & max(grepl("Warning:", pbdb()))==0) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb(), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
dim("aklsdjfhalk alkdfjh")
dim(1:3)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & max(grepl("Warning:", pbdb()[1,]))==0) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb(), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & max(grepl("Warning:", pbdb()[1,]))==0) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=class(pbdb()), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & colnames(pbdb())[1] != "Warning.") {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=class(pbdb()), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=class(pbdb()), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & colnames(pbdbReturn)[1] != "Warning.") {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=class(pbdb()), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & max(grepl("Warning:", pbdb()))==0) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=class(pbdb()), cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & max(grepl("Warning:", pbdb()))==0) {#
			#plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			#text(5,6, labels=class(pbdb()), cex=2.25, col='red')#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
			text(5,6, labels=pbdb(), cex=2.25, col='red')#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & length(colnames(pbdbReturn)) > 2) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				tableOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderTable({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- colnames(read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
dims(1:2)
dim(1:2)
dim(c(1:2, 1:2))
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & !is.null(dim(pbdbReturn))) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0 & !grepl("Warning:", pbdb()[1,])) {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels=pbdb()[1,], cex=2.25, col='red')#
			#par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			#plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			#segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			#axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		validate(#
			need(pbdbReturn != "", "Please select a data set")#
		)#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		if(nrow(pbdbReturn) > 0 & !is.null(dim(pbdbReturn))) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {		#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(pbdbReturn != "", "Please select a data set")#
		)#
		if(nrow(pbdbReturn) > 0 & !is.null(dim(pbdbReturn))) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {		#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)) != "", "Please select a data set")#
		)#
		if(nrow(pbdbReturn) > 0 & !is.null(dim(pbdbReturn))) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {		#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(!is.element("n_occs", colnames(pbdbReturn)), "Please select a data set")#
		)#
		if(nrow(pbdbReturn) > 0 & !is.null(dim(pbdbReturn))) {#
			pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		}#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {		#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(!is.element("n_occs", colnames(pbdbReturn)), "Please select a data set")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {		#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Please select a data set")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- (read.delim(file=uri))#
#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		if(nTaxa > 0) {		#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		} else {#
			plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
			text(5,6, labels="Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.",#
				cex=2.25, col='red')#
		}#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), h5("Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."))#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdb()#
		#pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		#pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?validate
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), h5("Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."))#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()#[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()#[,match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		#colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		match(c(hier,"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?need
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(!grepl("Warning", pbdbReturn), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
pbdb
class(pbdb)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(class(pbdbReturn) == "data.frame", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			#need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(class(pbdbReturn) == "data.frame", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(class(pbdbReturn) == "data.frame", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(class(pbdbReturn) == "data.frame", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(pbdbReturn != "THIS REQUEST RETURNED NO RECORDS", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(class(pbdbReturn) == "data.frame", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(pbdbReturn[1] != "THIS REQUEST RETURNED NO RECORDS", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(class(pbdbReturn) == "data.frame", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(pbdbReturn[1] == "THIS REQUEST RETURNED NO RECORDS", "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
x
x <- "test"
nrow(x)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlicsdfhia,Elrathia,Flexicalymene,Phacops,Kathwaiasdf&rank=genus&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")
https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlicsdfhia,Elrathia,Flexicalymene,Phacops,Kathwaiasdf&rank=genus&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp
read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Redlicsdfhia,Elrathia,Flexicalymene,Phacops,Kathwaiasdf&rank=genus&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){"Error"})#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){"Error"})#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){"Error"})#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		#tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		#}, error=function(e){"Error"})#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdb())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			#need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)#
		validate(#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
y
y <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Elratsdhia,Flexicalymene,Phacops,Kathwaia&rank=order&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")
y
tryCatch({#
			y <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Elratsdhia,Flexicalymene,Phacops,Kathwaia&rank=order&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")		}
)
tryCatch({#
			y <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Elratsdhia,Flexicalymene,Phacops,Kathwaia&rank=order&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")		}, error=function(e){"this"})
exists("y")
? tryCatch
tryCatch({#
			y <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Elratsdhia,Flexicalymene,Phacops,Kathwaia&rank=order&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")		}, NULL)
tryCatch({#
			y <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Elratsdhia,Flexicalymene,Phacops,Kathwaia&rank=order&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")		}, error=NULL)
tryCatch({#
			y <- read.delim("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=Olenellus,Elratsdhia,Flexicalymene,Phacops,Kathwaia&rank=order&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")		}, error=function(e){NULL})
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){NULL})#
#
		validate(#
			need(exists("pbdbReturn"), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){NULL})#
#
		validate(#
			need(!exists("pbdbReturn"), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(!is.null(nrow(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
uri
y
class(y)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){print("Error")})#
#
		validate(#
			need(exists("pbdbReturn"), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){print("Error")})#
#
		validate(#
			need(pbdbReturn, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdb <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		tryCatch({#
			pbdbReturn <- read.delim(file=uri)#
		}, error=function(e){print(pbdbReturn)})#
#
		validate(#
			need(pbdbReturn, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected."),#
			need(is.element("n_occs", colnames(pbdbReturn)), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbReturn, n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon namesand that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?req
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Please be patient, page may take a few seconds to load", style="color:red"),#
			h5("Wiat until you see a graph appear", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)#
	})#
	pbdb <- reactive({#
		req(pbdbCall(), cancelOutput = TRUE)#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)	#
	})#
	pbdb <- reactive({#
		req(pbdbCall(), cancelOutput = TRUE)#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
		#data.frame(pbdbTable, check.names=FALSE)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "taxonSelection"), style="color:blue")#
			),#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {#
	# make selection header#
	output$taxonSelection <- renderText({#
		paste0("Viewing ranges for: ", input$taxa, ".")#
	})#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)	#
	})#
	pbdb <- reactive({#
		req(pbdbCall(), cancelOutput = TRUE)#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		pbdbReturn <- read.delim(file=uri)	#
	})#
	pbdb <- reactive({#
		req(pbdbCall(), cancelOutput = TRUE)#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	eventReactive(input$submit, {	#
		pbdbCall <- reactive({#
			req(input$taxa, input$taxonReso)#
			taxa <- trimws(gsub(", ", ",", input$taxa))#
			uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
			pbdbReturn <- read.delim(file=uri)	#
		})#
	})#
	pbdb <- reactive({#
		req(pbdbCall(), cancelOutput = TRUE)#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	eventReactive(input$submit, {	#
		pbdbCall <- reactive({#
			req(input$taxa, input$taxonReso)#
			taxa <- trimws(gsub(", ", ",", input$taxa))#
			uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
			pbdbReturn <- read.delim(file=uri)	#
		}),#
	})#
	pbdb <- reactive({#
		req(pbdbCall(), cancelOutput = TRUE)#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		input$submitTaxa#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		isolate(#
			uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
		)#
		pbdbReturn <- read.delim(file=uri)	#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		input$submitTaxa#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		isolate(#
			uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))		#
			pbdbReturn <- read.delim(file=uri)	#
		)#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		input$submitTaxa#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		isolate(#
			uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp")),#
			pbdbReturn <- read.delim(file=uri)	#
		)#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		input$submitTaxa#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		isolate(#
			pbdbReturn <- read.delim(file=uri)	#
		)#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		nTaxa <- nrow(pbdb())#
		par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
		plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
		segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
		axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			actionButton("submitTaxa", "submit"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)	#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		input$submitTaxa#
		isolate({#
			nTaxa <- nrow(pbdb())#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		})#
	})#
	output$rangeTable <- renderTable({#
		if(input$taxonReso == "species") {#
			hier <- c("Phylum","Class","Order","Family","Genus","Species")#
		} else if(input$taxonReso == "genus") {#
			hier <- c("Phylum","Class","Order","Family","Genus")#
		} else if(input$taxonReso == "family") {#
			hier <- c("Phylum","Class","Order","Family")#
		} else if(input$taxonReso == "order") {#
			hier <- c("Phylum","Class","Order",)#
		} else if(input$taxonReso == "class") {#
			hier <- c("Phylum","Class",)#
		} else {#
			hier <- c("Phylum")#
		}#
		pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
		pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
		colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
		pbdbTable#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
#
ui <- fluidPage(#
#
	titlePanel("Stratigraphic Ranges from the PBDB"),#
	sidebarLayout(#
		sidebarPanel(					#
			h3("Enter the names of taxa"),#
			h5("If you see an error message, you have misspelled one or more of your taxon names.", style="color:red"),#
			br(),#
			# select environment#
			textInput(inputId = "taxa",#
				label = "Enter a taxon or multiple taxa separated by a comma:",#
				value = "Olenellus, Redlichia, Elrathia, Flexicalymene, Phacops, Kathwaia"),#
			br(),#
			# select taxonomic resolution#
			selectInput(inputId = "taxonReso",#
				label = "Taxonomic resolution:",#
				choices = c("Phylum","Class","Order","Family","Genus","Species"),#
				selected = "Genus"),#
			br(),#
			br(),#
			actionButton("submitTaxa", "submit"),#
			width=3,#
		),#
		mainPanel(					#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Stratigraphic Ranges"),		#
			fluidRow(#
				plotOutput(outputId = "rangePlot"),#
				h5("Call to Paleobiology Database API:"),#
				textOutput(outputId = "uriCall")#
			), #
			h3("Data Table"),		#
			fluidRow(#
				tableOutput(outputId = "rangeTable")#
			),#
		)#
	)#
)	#
#
server <- function(input, output, session) {	#
	pbdbCall <- reactive({#
		req(input$taxa, input$taxonReso)#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
		pbdbReturn <- read.delim(file=uri)	#
	})#
	pbdb <- reactive({#
		req(pbdbCall())#
		validate(#
			need(is.element("n_occs", colnames(pbdbCall())), "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn <- subset(pbdbCall(), n_occs >= 1 )#
		validate(#
			need(nrow(pbdbReturn) > 0, "Error: Check spelling of taxon names that the taxa entered\nare at least the level of resolution selected.")#
		)#
		pbdbReturn#
	})#
	output$uriCall <- renderText({#
		taxa <- trimws(gsub(", ", ",", input$taxa))#
		uri <- URLencode(paste0("https://paleobiodb.org/data1.2/taxa/list.tsv?base_name=",taxa,"&rank=",tolower(input$taxonReso),"&taxon_status=accepted&rel=all_parents&show=class,app&order=hierarchy,firstapp"))#
	})#
	output$rangePlot <- renderPlot({#
		input$submitTaxa#
		isolate({#
			nTaxa <- nrow(pbdb())#
			par(mar=c(7.5,4,0.5,0.5), las=2, cex=1.5)#
			plot(1:10, type="n", xlim=c(1,nTaxa), ylim=rev(range(c(pbdb()$firstapp_max_ma, pbdb()$lastapp_min_ma), na.rm=TRUE)), xaxt="n", ylab="Geologic time (Ma)", xlab="")#
			segments(1:nTaxa, pbdb()$firstapp_max_ma, 1:nTaxa, pbdb()$lastapp_min_ma, lwd=5)#
			axis(side=1, at=1:nTaxa, labels=pbdb()$taxon_name)#
		})#
	})#
	output$rangeTable <- renderTable({#
		input$submitTaxa#
		isolate({#
			if(input$taxonReso == "species") {#
				hier <- c("Phylum","Class","Order","Family","Genus","Species")#
			} else if(input$taxonReso == "genus") {#
				hier <- c("Phylum","Class","Order","Family","Genus")#
			} else if(input$taxonReso == "family") {#
				hier <- c("Phylum","Class","Order","Family")#
			} else if(input$taxonReso == "order") {#
				hier <- c("Phylum","Class","Order",)#
			} else if(input$taxonReso == "class") {#
				hier <- c("Phylum","Class",)#
			} else {#
				hier <- c("Phylum")#
			}#
			pbdbTable <- pbdb()[,match(c(tolower(hier),"n_occs","early_interval","firstapp_max_ma","late_interval","lastapp_min_ma"), colnames(pbdb()))]#
			pbdbTable$late_interval[is.na(pbdbTable$late_interval)] <- pbdbTable$early_interval[is.na(pbdbTable$late_interval)]#
			colnames(pbdbTable) <- c(hier,"Number Occs.","FAD ","FAD Ma","LAD","LAD Ma")#
			pbdbTable#
		})#
	})#
}#
#
shinyApp(ui = ui, server = server)
q()
