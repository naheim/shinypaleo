nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="../liveDead/warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="../liveDead/warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="../liveDead/warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
#
	# initial conditions#
	initAssemb <- rbind(liveCom, deadCom)#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(deadCom))/length(unique(liveCom)),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died), levels=sort(unique(metaComm))#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(deathAssemb))/length(unique(livingAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
i
# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died), levels=sort(unique(metaComm))#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(deathAssemb))/length(unique(livingAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="../liveDead/warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="../liveDead/warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="../liveDead/warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
#
	# initial conditions#
	initAssemb <- rbind(liveCom, deadCom)#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(deadCom))/length(unique(liveCom)),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(deathAssemb))/length(unique(livingAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
head(output)
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="../liveDead/warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="../liveDead/warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="../liveDead/warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
#
	# initial conditions#
	initAssemb <- rbind(liveCom, deadCom)#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(deadCom))/length(unique(liveCom)),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(deathAssemb))/length(unique(livingAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	#output <- rbind(initStats, output)#
	#return(output)
head(output)
head(rbind(initStats, output))
nrow(rbind(initStats, output))
output <- rbind(initStats, output)
plot(0:100, output$jaccard, type='l')
plot(output$jaccard, 0:100, type='l')
plot(output$deadS_liveS, 0:100, type='l')
plot(output$chao.jaccard, 0:100, type='l')
1/0.01
1/0.99
1/500
1/10
getwd()
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			selectInput("decimal", inputId = "immig",#
				label="Probability of immigration",#
				min = 0.01, max = 0.99,#
				value = 0.3),),#
			br(),	#
			# select level of averaging--shell lifetime#
			selectInput("integer", inputId = "timeavg",#
				label="Years shells persist in death assemblage",#
				min = 10, max = 500,#
				value = 100),),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	# input #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput("decimal", inputId = "immig",#
				label="Probability of immigration",#
				min = 0.01, max = 0.99,#
				value = 0.3),),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput("integer", inputId = "timeavg",#
				label="Years shells persist in death assemblage",#
				min = 10, max = 500,#
				value = 100),),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	# input #
}#
#
shinyApp(ui = ui, server = server)
? sliderInput
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration",#
				min = 0.01, max = 0.99,#
				value = 0.3),),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage",#
				min = 10, max = 500,#
				value = 100),),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	# input #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	# input #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=10000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes()$deadS_liveS, 1:nrow(modRes()), xlab="Years", ylab="Richness inflation")#
		plot(modRes()$chao.jaccard, 1:nrow(modRes()), xlab="Years", ylab="Similarity to initial assemblage")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=10000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes()$deadS_liveS, 1:nrow(modRes()), xlab="Years", ylab="Richness inflation")#
		plot(modRes()$chao.jaccard, 1:nrow(modRes()), xlab="Years", ylab="Similarity to initial assemblage")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes()$deadS_liveS, 1:nrow(modRes()), xlab="Years", ylab="Richness inflation")#
		plot(modRes()$chao.jaccard, 1:nrow(modRes()), xlab="Years", ylab="Similarity to initial assemblage")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Years", ylab="Richness inflation")#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlab="Years", ylab="Similarity to initial assemblage")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Years", ylab="Richness inflation", type="l")#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlab="Years", ylab="Similarity to initial assemblage", type="l")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), lab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			## Title with selections#
			fluidRow(#
				h2(textOutput(outputId = "selections"), style="color:blue")#
			),#
			## Age distribution of shells#
			h3("1. Age distribution of shells"),		#
			fluidRow(#
				plotOutput(outputId = "ageDist")#
			), #
			## Age vs. Depth#
			h3("2. Age vs. Depth"),		#
			fluidRow(#
				plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
			), #
			## Age vs. Size#
			h3("3. Age vs. Size"),		#
			fluidRow(#
				plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
			), #
			## model results#
			h3("4. Time averaging and diversity"),		#
			fluidRow(#
				plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Southern California with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				# original image size: height = "1707px", width = "1800px"#
				a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			tabsetPanel(type = "tabs",#
				tabPanel("SoCal Data", #
#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist")#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				),#
				tabPanel("Time Averaging Model", #
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
					),#
				),	#
			)#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			tabsetPanel(type = "tabs",#
				tabPanel("SoCal Data", #
#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist")#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				),#
				tabPanel("Time Averaging Model", #
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
					),#
				),	#
			)#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
runExample("06_tabsets")
?tabsetPanel
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			tabsetPanel(#
				tabPanel("SoCal Data", #
#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist")#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px")#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				),#
				tabPanel("Time Averaging Model", #
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px")#
					),#
				),	#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
? tabPanel
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			# Nuculana_taphria#
			h2(em("Nuculana taphria")),#
			img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
			h5("Scale bar is 1 mm", style="color:gray"),#
			h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
			br(),#
			h5("All plots and statistics presented on the left are for the region selected below"),#
			br(),#
			# select region#
			selectInput(inputId = "region",#
				label = "Region:",#
				choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
				selected = "all"),#
			br(),#
			# select immigration probability#
			sliderInput(inputId = "immig",#
				label="Probability of immigration:",#
				min = 0.01, max = 0.99,#
				value = 0.3),#
			br(),	#
			# select level of averaging--shell lifetime#
			sliderInput(inputId = "timeavg",#
				label="Years shells persist in death assemblage:",#
				min = 10, max = 500,#
				value = 100),#
			br(),#
			# add more selections here#
			width=3#
		),#
#
		mainPanel(#
			tabsetPanel(#
				tabPanel("SoCal Data", #
#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				),#
				tabPanel("Time Averaging Model", #
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					),#
				),	#
			),#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(#
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				),#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					),#
				)#
			)	#
		),#
	)#
)#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(#
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(#
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		),#
	)#
)#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		),#
	)#
)#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		),#
	),#
)#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		),#
	),#
),#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", #
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model",#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					#fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					#),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					#fluidRow(#
						plotOutput(outputId = "ageDist"),#
					#), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					#fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					#), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					#fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					#),#
					## Locality Map#
					#fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					#),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				)#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("SoCal Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseData(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1"),#
						),#
						column(6,#
							uiOutput("site2"),#
						),#
					),#
					br(),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					),#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$selections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Time Averaging, Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1"),#
						),#
						column(6,#
							uiOutput("site2"),#
						),#
					),#
					br(),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					),#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$selections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					),#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("4. Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$selections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "selections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$selections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$selections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
runGitHub("shinypaleo", "naheim", subdir="timeAveraging")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "300px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "1200px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
#
	# initial conditions#
	initAssemb <- rbind(liveCom, deadCom)#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(deadCom,100)))/length(unique(sample(liveCom,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
output
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
#
	# initial conditions#
	initAssemb <- rbind(liveCom, deadCom)#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(deadCom,100)))/length(unique(sample(liveCom,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
initAssemb
rowSums(initAssemb)
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
#
	# initial conditions#
	initAssemb <- rbind(liveCom, deadCom)
sample(deadCom,100)
deadCom
initLive <- rep(names(liveCom), colSums(liveCom))
initLive <- rep(names(liveCom), colSums(liveCom))
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), colSums(liveCom))
liveCom
initLive <- rep(names(liveCom), liveCom)
initLive
deathAssemb
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- colSums(liveIn[match(c("site_25","site_26","site_27","site_28"), rownames(liveIn)),])#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
# drop empty species and sites#
dropEmpty <- function(live, dead) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data -- live dead	#
parseDataLiveDead <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simCalc <- function(live, dead) {#
	if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list("1", c("pctSim","jaccard","chao.jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list(rownames(live), c("pctSim","jaccard","chao.jaccard"))))#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(class(common)[1] == "numeric") {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)#
}#
#
# Parse Data--time averaging#
parseDataTimeAvg <- function(x, region) {	#
	if(region == "all") {#
		ages <- x#
	} else if(region == "all but San Diego") {#
		ages <- subset(x, Region != "San Diego")#
	} else {#
		ages <- subset(x, Region == region)#
	}#
	return(ages)#
}#
#
topLabel <- function(region) {	#
	if(region == "all") {#
		topLabel <- "Viewing specimens from all regions."#
	} else if(region == "all but San Diego") {#
		topLabel <- "Viewing specimens from all regions, except San Diego."#
	} else {#
		topLabel <- paste0("Viewing specimens from the ", region, " region.")#
	}#
	return(topLabel)#
}#
#
taModel <- function(nT, pDest, pImmig, pDeath) {#
	#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(sample(metaComm, 200, replace=TRUE))#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)#
}
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:2), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=names(metaComm)))#
	deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
liveCom
liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=names(metaComm)))
liveCom
sample(metaComm, 200, replace=TRUE)
factor(sample(metaComm, 200, replace=TRUE), levels=names(metaComm))
liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=metaComm))
liveCom
factor(sample(metaComm, 200, replace=TRUE), levels=metaComm)
metaComm
sample(metaComm, 200, replace=TRUE)
factor(sample(metaComm, 200, replace=TRUE), levels=metaComm)
liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))
liveCom
deadCom
deadCom <- colSums(deadIn[match(c("site_25","site_26","site_27","site_28"), rownames(deadIn)),])
deadCom
range(names(liveCom) == names(deadCom))
length(metaComm)
liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)
initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)
#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=3, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#return(output)
initAssemb
initAssemb
initAssemb[1,]
initAssemb[2,]
#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)
live<- initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0]; dead <- initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0]
if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list("1", c("pctSim","jaccard","chao.jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list(rownames(live), c("pctSim","jaccard","chao.jaccard"))))#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(class(common)[1] == "numeric") {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)
class(live)
if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list("1", c("pctSim","jaccard","chao.jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list(rownames(live), c("pctSim","jaccard","chao.jaccard"))))#
	}#
	for(i in 1:n) {#
		if(is.element(class(live), c("integer","numeric"))) {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(class(common)[1] == "numeric") {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)
if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list("1", c("pctSim","jaccard","chao.jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list(rownames(live), c("pctSim","jaccard","chao.jaccard"))))#
	}#
	for(i in 1:n) {#
		if(is.element(class(live), c("integer","numeric"))) {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(class(common)[1] == "numeric") {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)
live
dead
class(live) == "numeric"
if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list("1", c("pctSim","jaccard","chao.jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=3, dimnames=list(rownames(live), c("pctSim","jaccard","chao.jaccard"))))#
	}#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(class(common)[1] == "numeric") {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)
sim
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1:3), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		#plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
bray.curtis
1-0.23
1-(1-0.23)
1-1-0.23
1-1-0.231-.77
x
comm
sum(comm)
comm[,comm[1,] > 0 & comm[2,] > 0]
apply(comm[,comm[1,] > 0 & comm[2,] > 0], 2, min)
sum(apply(comm[,comm[1,] > 0 & comm[2,] > 0], 2, min))
2*sum(apply(comm[,comm[1,] > 0 & comm[2,] > 0], 2, min))/sum(comm)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
source("R/utils.r")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
source("R/utils.r")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,-1]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		print(sim)#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		print(sim)#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead
live <- liveCounts
dead <- deadCounts
if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	sim <- data.frame("bray.curtis" = rep(NA, n), "pctSim" = rep(NA, n),"jaccard" = rep(NA, n),"chao.jaccard" = rep(NA, n))#
#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		# bray-curtis#
		sim$bray.curtis[i] <- 2*sum(apply(comm[,comm[1,] > 0 & comm[2,] > 0], 2, min))/sum(comm)#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(is.element(class(common)[1], c("integer","numeric"))) {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	if(n>1) print(sim)#
	return(sim)
i
n
if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		# bray-curtis#
		sim$bray.curtis[i] <- 2*sum(apply(comm[,comm[1,] > 0 & comm[2,] > 0], 2, min))/sum(comm)#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		common <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		if(is.element(class(common)[1], c("integer","numeric"))) {#
			U <- common[1]#
			V <- common[2]#
		} else {#
			U <- sum(common[1,])#
			V <- sum(common[2,])#
		}#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)
comm
comm[,comm[1,] > 0 & comm[2,] > 0]
class(comm)
class(comm[,comm[1,] > 0 & comm[2,] > 0])
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	sim <- data.frame("bray.curtis" = rep(NA, n), "pctSim" = rep(NA, n),"jaccard" = rep(NA, n),"chao.jaccard" = rep(NA, n))#
#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
		commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		# bray-curtis#
		if(class(common)[1]) == "integer") {#
			U <- commonPct[1]#
			V <- commonPct[2]#
			sim$bray.curtis[i] <- 2*min(common))/sum(comm)#
		} else {#
			U <- sum(commonPct[1,])#
			V <- sum(commonPct[2,])#
			sim$bray.curtis[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
		}#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}
common
if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	sim <- data.frame("bray.curtis" = rep(NA, n), "pctSim" = rep(NA, n),"jaccard" = rep(NA, n),"chao.jaccard" = rep(NA, n))#
#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
		commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		# bray-curtis#
		if(class(common))[1] == "integer") {#
			U <- commonPct[1]#
			V <- commonPct[2]#
			sim$bray.curtis[i] <- 2*min(common)/sum(comm)#
		} else {#
			U <- sum(commonPct[1,])#
			V <- sum(commonPct[2,])#
			sim$bray.curtis[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
		}#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}
if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	sim <- data.frame("bray.curtis" = rep(NA, n), "pctSim" = rep(NA, n),"jaccard" = rep(NA, n),"chao.jaccard" = rep(NA, n))#
#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
		commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		# bray-curtis#
		if(class(common)[1] == "integer") {#
			U <- commonPct[1]#
			V <- commonPct[2]#
			sim$bray.curtis[i] <- 2*min(common)/sum(comm)#
		} else {#
			U <- sum(commonPct[1,])#
			V <- sum(commonPct[2,])#
			sim$bray.curtis[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
		}#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)
sim
head(live[9,])
dead[9,]
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
sim
plot(1:nrow(sim), sim$bray.curtis  )
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
nT
#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=4, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
	}#
	print(output)#
	output <- rbind(initStats, output)#
	return(output)
# drop empty species and sites#
dropEmpty <- function(live, dead) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data -- live dead	#
parseDataLiveDead <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simCalc <- function(live, dead) {#
	if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	sim <- data.frame("bray.curtis" = rep(NA, n), "pctSim" = rep(NA, n),"jaccard" = rep(NA, n),"chao.jaccard" = rep(NA, n))#
#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
		commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		# bray-curtis#
		if(class(common)[1] == "integer") {#
			U <- commonPct[1]#
			V <- commonPct[2]#
			sim$bray.curtis[i] <- 2*min(common)/sum(comm)#
		} else {#
			U <- sum(commonPct[1,])#
			V <- sum(commonPct[2,])#
			sim$bray.curtis[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
		}#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)#
}#
#
# Parse Data--time averaging#
parseDataTimeAvg <- function(x, region) {	#
	if(region == "all") {#
		ages <- x#
	} else if(region == "all but San Diego") {#
		ages <- subset(x, Region != "San Diego")#
	} else {#
		ages <- subset(x, Region == region)#
	}#
	return(ages)#
}#
#
topLabel <- function(region) {	#
	if(region == "all") {#
		topLabel <- "Viewing specimens from all regions."#
	} else if(region == "all but San Diego") {#
		topLabel <- "Viewing specimens from all regions, except San Diego."#
	} else {#
		topLabel <- paste0("Viewing specimens from the ", region, " region.")#
	}#
	return(topLabel)#
}#
#
taModel <- function(nT, pDest, pImmig, pDeath) {#
	#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=4, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
	}#
	print(output)#
	output <- rbind(initStats, output)#
	return(output)#
}
#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=4, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
	}#
	print(output)#
	output <- rbind(initStats, output)#
	return(output)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "600px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		plot(modRes$deadS_liveS, 1:nrow(modRes), xlab="Richness inflation", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		hist(modRes$deadS_liveS, xlab="Richness inflation", range=0, lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, xlab="Richness inflation", range=0, lwd=1.25)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.1)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		plot(modRes$bray.curtis, 1:nrow(modRes), xlim=c(0,1), xlab="BC Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,3), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?mtext
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", var(modRes$chao.jaccard), sep="", adj=0), side=3)#
	})#
}#
#
shinyApp(ui = ui, server = server)
pretty(0.0000004872345982764398)
? signif
signif(0.0000004872345982764398)
signif(0.00004872345982764398)
signif(0.00004872345982764398, 3)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex-1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=2000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.3),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 10, max = 500,#
						value = 100),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="CJ Similarity to initial assemblage", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 200,#
						value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.01, max = 0.99,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/10, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.05, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/20, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0,4))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.05, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/20, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
# drop empty species and sites#
dropEmpty <- function(live, dead) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data -- live dead	#
parseDataLiveDead <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simCalc <- function(live, dead) {#
	if(is.element(class(live), c("integer","numeric"))) {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	sim <- data.frame("bray.curtis2" = rep(NA, n), "bray.curtis" = rep(NA, n), "pctSim" = rep(NA, n),"jaccard" = rep(NA, n),"chao.jaccard" = rep(NA, n))#
#
	for(i in 1:n) {#
		if(n == 1) {#
			x <- live#
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
		commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
		# bray-curtis#
		sim$bray.curtis[i] <- sum(abs(x-y))/sum(comm)#
		if(class(common)[1] == "integer") {#
			U <- commonPct[1]#
			V <- commonPct[2]#
			sim$bray.curtis2[i] <- 1 - 2*min(common)/sum(comm)#
		} else {#
			U <- sum(commonPct[1,])#
			V <- sum(commonPct[2,])#
			sim$bray.curtis2[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
		}#
		# pct Sim#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		#jaccard#
		sim$jaccard[i] <- nCommon / nTotal#
		# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
		sim$chao.jaccard[i] <- U*V / (U+V-U*V)#
	}#
	return(sim)#
}#
#
# Parse Data--time averaging#
parseDataTimeAvg <- function(x, region) {	#
	if(region == "all") {#
		ages <- x#
	} else if(region == "all but San Diego") {#
		ages <- subset(x, Region != "San Diego")#
	} else {#
		ages <- subset(x, Region == region)#
	}#
	return(ages)#
}#
#
topLabel <- function(region) {	#
	if(region == "all") {#
		topLabel <- "Viewing specimens from all regions."#
	} else if(region == "all but San Diego") {#
		topLabel <- "Viewing specimens from all regions, except San Diego."#
	} else {#
		topLabel <- paste0("Viewing specimens from the ", region, " region.")#
	}#
	return(topLabel)#
}#
#
taModel <- function(nT, pDest, pImmig, pDeath) {#
	#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=4, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
	}#
	output <- rbind(initStats, output)#
	return(output)#
}
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/20, pImmig=input$immig, pDeath=0.75)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/20, pImmig=input$immig, pDeath=0.25)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/2, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","bray.curtis"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Bray-Curtis similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5))#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
runGitHub("shinypaleo", "naheim", subdir="timeAveraging")
runGitHub("shinypaleo", "naheim", subdir="taphonomy")
runGitHub("shinypaleo", "naheim", subdir="taphonomy")
runGitHub("shinypaleo", "naheim", subdir="taphonomy")
runGitHub("shinypaleo", "naheim", subdir="taphonomy")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5), lty=1)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
log(0.5)
boxplot(runif(100,0.1,100))
boxplot(runif(100,0.1,100), log="y")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(modRes$deadS_liveS, ylab="Richness inflation", range=0, lwd=1.25, ylim=c(0.5,5), lty=1, log="y")#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(log(modRes$deadS_liveS), ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
?boxplot
10^0.5
10^0.6
10^0.7
10^0.8
10^-0.8
10^-0.5
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		boxplot(log(modRes$deadS_liveS), ylab=expression(paste("log"[10], " Richness inflation", sep="")), ylim=c(-0.5,0.8), plot=FALSE)#
		abline(h=0, lty=2)#
		boxplot(log(modRes$deadS_liveS), range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
x <- runif(100,0.1,5); boxplot(log(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), ylim=c(-0.5,0.8), plot=FALSE)#
		abline(h=0, lty=2)#
		boxplot(log(x), range=0, lwd=1.25, lty=1, add=TRUE)
x <- runif(100,0.1,5); boxplot(log(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), ylim=c(-0.5,0.8), plot=FALSE)#
		abline(h=0, lty=2)#
		boxplot(log(x), range=0, lwd=1.25, lty=1, add=TRUE)
boxplot(log(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-0.5,0.8), plot=FALSE)#
		abline(h=0, lty=2)
boxplot(log(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-0.5,0.8))#
		abline(h=0, lty=2)
range(x)
range(log10(x))
boxplot(log10(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-0.5,0.8))#
		abline(h=0, lty=2)
range(log10(x))
boxplot(log10(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-0.8,0.8))#
		abline(h=0, lty=2)
boxplot(log10(x), ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-1,1))#
		abline(h=0, lty=2)
boxplot(log10(x), type="n", ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-1,1))#
		abline(h=0, lty=2)
boxplot(log10(x), type="n", ylab=expression(paste("log"[10], " Richness inflation", sep="")), range=0, lwd=1.25, lty=1, ylim=c(-1,1))#
		abline(h=0, lty=2)
boxplot(log10(x), plot=FALSE, ylab=expression(paste("log"[10], " Richness inflation", sep="")), ylim=c(-1,1))#
		abline(h=0, lty=2)
boxplot(log10(x), plot=FALSE, ylab=expression(paste("log"[10], " Richness inflation", sep="")), ylim=c(-1,1))#
		boxplot(log10(x), range=0, lwd=1.25, lty=1, add=TRUE); abline(h=0, lty=2)
plot(-1:1, type="n")
boxplot(log10(x), add=TRUE, ylab=expression(paste("log"[10], " Richness inflation", sep="")), ylim=c(-1,1))
boxplot(x)
plot(1:10, xlim=c(-0.5,0.5), ylim=c(-1,1), xaxt="n", xlab="", ylab=expression(paste("log"[10], " Richness inflation", sep="")))
plot(1:10, xlim=c(-0.5,0.5), ylim=c(-1,1), xaxt="n", xlab="", ylab=expression(paste("log"[10], " Richness inflation", sep="")))#
		abline(h=0, lty=2)#
		boxplot(log10(x), range=0, lwd=1.25, lty=1, add=TRUE)
plot(1:10, xlim=c(0.5,1.5), ylim=c(-1,1), xaxt="n", xlab="", ylab=expression(paste("log"[10], " Richness inflation", sep="")))#
		abline(h=0, lty=2)#
		boxplot(log10(x), range=0, lwd=1.25, lty=1, add=TRUE)
plot(1:10, xlim=c(0.75,1.25), ylim=c(-1,1), xaxt="n", xlab="", ylab=expression(paste("log"[10], " Richness inflation", sep="")))#
		abline(h=0, lty=2)#
		boxplot(log10(x), range=0, lwd=1.25, lty=1, add=TRUE)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, xlim=c(0.5,1.5), ylim=c(-1,1), xaxt="n", xlab="", ylab=expression(paste("log"[10], " Richness inflation", sep="")))#
		abline(h=0, lty=2)#
		boxplot(log10(modRes$deadS_liveS), range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Make Selections"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes the two site comparison tables)"),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# add more selections here#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,deadIn$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	})#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,5), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
q()
