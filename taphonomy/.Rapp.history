cor(x[1,],y[1,])
seq.int(nrow(x))
sapply(seq.int(nrow(x)), function(i) cor(y[i,], y[i,]))
combn(data.frame(x), 2, cor)
combn(data.frame(x), 2, cor)
sapply(seq.int(nrow(x)), function(i) cor(y[i,], y[i,]))
# drop empty species and sites#
dropEmpty <- function(live, dead, easteregg=NULL) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data -- live dead	#
parseDataLiveDead <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis[i] <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2[i] <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard[i] <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard[i] <- U*V / (U+V-U*V)#
	return(c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard))#
}#
#
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(sim)#
}#
#
# Parse Data--time averaging#
parseDataTimeAvg <- function(x, region) {	#
	if(region == "all") {#
		ages <- x#
	} else if(region == "all but San Diego") {#
		ages <- subset(x, Region != "San Diego")#
	} else {#
		ages <- subset(x, Region == region)#
	}#
	return(ages)#
}#
#
topLabel <- function(region) {	#
	if(region == "all") {#
		topLabel <- "Viewing specimens from all regions."#
	} else if(region == "all but San Diego") {#
		topLabel <- "Viewing specimens from all regions, except San Diego."#
	} else {#
		topLabel <- paste0("Viewing specimens from the ", region, " region.")#
	}#
	return(topLabel)#
}#
#
taModel <- function(nT, pDest, pImmig, pDeath) {#
	#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=4, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
	}#
	output <- rbind(initStats, output)#
	return(output)#
}
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Selection Taxa & Evnironment"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity among living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="1000px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomasovych, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- sim[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Abundance")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,2))#
		hist(simLive$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Species")#
		box()#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Abundance")#
		box()#
		hist(simDead$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Species")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
live <- liveCounts
dead <- deadCounts
if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}
simMeasures(live[1,], dead[1,])
x <- live[1,]
y <- dead[1,]
comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis[i] <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2[i] <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2[i] <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard[i] <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard[i] <- U*V / (U+V-U*V)
comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)
jaccard
chao.jaccard
bray.curtis
bray.curtis2
if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(sim)
sim
dim(sim)
nrow(live)
ncol(live)
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	return(c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard))#
}#
#
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(sim)#
}
x
simCalc(x,y)
simCalc(live[1:2],dead[1:2,])
simCalc(live[1:2,], dead[1:2,])
simCalc(live[1:20,], dead[1:20,])
simCalc(live, dead)
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	return(data.frame(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard))#
}
simCalc(live, dead)
simCalc(live[1,], dead[1,])
t(simCalc(live[1,], dead[1,]))
class(t(simCalc(live[1,], dead[1,])))
class(t(simCalc(live, dead)))
(t(simCalc(live, dead)))
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	return(t(data.frame(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard)))#
}
(simCalc(live, dead))
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	return(data.frame(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard))#
}#
#
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(t(sim))#
}
simCalc(live, dead)
sim <- simCalc(live, dead)
sim$jaccard
class(sim)
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(data.frame(sim))#
}
sim <- simCalc(live, dead)
sim
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(data.frame(t(sim)))#
}
sim <- simCalc(live, dead); sim
sim$jaccard
hist(sim$jaccard)
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(as.data.frame(t(sim)))#
}
sim <- simCalc(live, dead); sim
sim
sim$jaccard
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	return(c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard))#
}#
#
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(as.data.frame(t(sim)))#
}
sim <- simCalc(live, dead); sim
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	sim <- c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard)#
	names(sim) <- c('bray.curtis2,','bray.curtis,','pctSim,','jaccard,','chao.jaccard')#
	return(sim)#
}
x
z <- simMeasures(x,y)
class(z)
z
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]))#
	}#
	return(as.data.frame(t(sim)))#
}
sim <- simCalc(live, dead); sim
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	sim <- c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard)#
	names(sim) <- c('bray.curtis2','bray.curtis','pctSim','jaccard','chao.jaccard')#
	return(sim)#
}
sim <- simCalc(live, dead); sim
sim$jaccard
hist(sim$jaccard)
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]), simplify=TRUE)#
	}#
	return(as.data.frame(t(sim)))#
}
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead) & is.element(class(live), c("integer","numeric"))) {#
		sim <- combn(live, 2, simMeasures)	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]), simplify=TRUE)#
	}#
	return(sim)#
}
sim <- simCalc(live, dead); sim
class(sim)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Selection Taxa & Evnironment"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity among living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="1000px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomasovych, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- sim[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Abundance")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,2))#
		hist(simLive$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Species")#
		box()#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Abundance")#
		box()#
		hist(simDead$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Species")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Selection Taxa & Evnironment"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity among living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="1000px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomasovych, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- sim[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Abundance")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,2))#
		hist(simLive$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Species")#
		box()#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Abundance")#
		box()#
		hist(simDead$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Species")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
sim <- simCalc(live); sim
choose(10,2)
combn(live, 2, simMeasures)
?combn
sim <- combn(live, 2, simMeasures(live))
x
sim <- combn(live, 2, min)
combn(live, 2, min)
choose(nrow(live), 2)
choose(ncol(live), 2)
length(combn(live, 2, min))
?combn
length(combn(t(live), 2, min, na.rm=T))
combn(live, 2, max)
combn(t(live), 2, max)
combn(1:10,2)
combn(1:nrow(live),2)
combos <- combn(1:nrow(live),2)
combos
combos[1,]
dim(live)
combos <- combn(1:nrow(live),2)#
		sim <- sapply(seq.int(nrow(combos)), function(i) simMeasures(live[combos[1,i],], dead[combos[2,i],]), simplify=TRUE)
sim
live
combos <- combn(1:nrow(live),2)#
		sim <- sapply(seq.int(nrow(combos)), function(i) simMeasures(live[combos[1,i],], live[combos[2,i],]), simplify=TRUE)
sim
sim <- sapply(seq.int(ncol(combos)), function(i) simMeasures(live[combos[1,i],], live[combos[2,i],]), simplify=TRUE)
sim
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Selection Taxa & Evnironment"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity among living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="1000px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomasovych, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- sim[,match(c("jaccard","chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Jaccard similarity index", "Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Jaccard similarity index"=sim$jaccard, "Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Species")#
		box()#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Abundance")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,2))#
		hist(simLive$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Species")#
		box()#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Abundance")#
		box()#
		hist(simDead$jaccard, breaks=seq(0,1,0.05), xlab="Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Species")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						tableOutput(outputId = "env_stats")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						tableOutput(outputId = "liveDeadSimPooled")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						tableOutput(outputId = "siteListSim")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity among between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="1000px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomasovych, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- sim[,match(c("chao.jaccard"), colnames(sim))]#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Abundance")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Abundance")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of specimens", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
simCalc(live[1:2,], dead[1:2,])
sim <- simCalc(live[1:2,], dead[1:2,])
sim
sim <- sim[,match(c("chao.jaccard"), colnames(sim))]
sim
sim <- sim[,match(c("chao.jaccard"), colnames(sim))]
sim <- simCalc(live[1:2,], dead[1:2,])
sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])
sim
sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])
sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])
sim <- simCalc(live[1:2,], dead[1:2,])
sim
sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])
sim
colnames(sim) <- c("Chao-Jaccard similarity index")
sim
rownames(sim) <- c(input$site1, input$site2)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity among between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomasovych, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity-Abundance")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity-Abundance")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity-Abundance")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),3), sep="", adj=0), side=3, cex=1.5)#
	})#
}#
#
shinyApp(ui = ui, server = server)
runGitHub("shinypaleo", "naheim", subdir="taphonomy")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
modRes <- taModel(nT=100, pDest=1/10, pImmig=0.5, pDeath=0.9)
nT=100; pDest=1/10; pImmig=0.5; pDeath=0.9
# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[1,initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard
getwd()
# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)
#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.1#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[1,initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	print(output)#
	return(output)
i
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.9#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[1,initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	print(output)#
	return(output)
nT <- 100#
	pDest <- 0.02#
	pImmig <- 0.25#
	pDeath <- 0.9#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[1,initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#print(output)#
	#return(output)
i
# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[1,initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard
initAssemb
length(initAssemb)
ncol(initAssemb)
finalLive
length(finalLive)
deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])
selta.som
selta.sim
delta.sim
deltaSim
deltaSim$chao.jaccard
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
runGitHub("shinypaleo", "naheim", subdir="taphonomy")
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
						p("These two plots compare the numbers of species (left) and individuals (right) in the",#
							"living and death assemblages. Each point is a site. The dashed line is the 1-to-1 line:" #
							"samples that fall on the line have the same value in the living and death assemblage."#
							"Note that both axes are shown on a log-scale. This means that each change of one unit on the"#
							"axis represents a factor-of-ten change in the data. (e.g., the distance between 10 and 100"#
							"is the same as between 100 and 1000.) We often plot data on a log-scale when the data span" #
							"a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
						p("These two plots compare the numbers of species (left) and individuals (right) in the",#
							"living and death assemblages. Each point is a site. The dashed line is the 1-to-1 line:", #
							"samples that fall on the line have the same value in the living and death assemblage.",#
							"Note that both axes are shown on a log-scale. This means that each change of one unit on the",#
							"axis represents a factor-of-ten change in the data. (e.g., the distance between 10 and 100",#
							"is the same as between 100 and 1000.) We often plot data on a log-scale when the data span",#
							"a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
						textOutput(outputId="pt2Caption")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# Caption for live-dead plots#
	output$pt2Caption <- renderText({#
		captionText <- "These two plots compare the numbers of species (left) and individuals (right) in the #
			living and death assemblages. Each point is a site. The dashed line is the 1-to-1 line: #
			samples that fall on the line have the same value in the living and death assemblage.#
			Note that both axes are shown on a log-scale. This means that each change of one unit on the #
			axis represents a factor-of-ten change in the data. (e.g., the distance between 10 and 100 #
			is the same as between 100 and 1000.) We often plot data on a log-scale when the data span #
			a large range in values and most are small."#
	})#
	p()#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px")#
						p("These two plots compare the numbers of species (left) and individuals (right) in the living and death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the line have the same value in the living and death assemblage. Note that both axes are shown on a log-scale. This means that each change of one unit on the axis represents a factor-of-ten change in the data. (e.g., the distance between 10 and 100 is the same as between 100 and 1000.) We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						p("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblage. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						(e.g., the distance between 10 and 100 is the same as between 100 and 1000.) We often plot data on a \#
						log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the left are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						p("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblage. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						(e.g., the distance between 10 and 100 is the same as between 100 and 1000.) We often plot data on a \#
						log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
# drop empty species and sites#
dropEmpty <- function(live, dead, easteregg=NULL) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data -- live dead	#
parseDataLiveDead <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	sim <- c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard)#
	names(sim) <- c('bray.curtis2','bray.curtis','pctSim','jaccard','chao.jaccard')#
	return(sim)#
}#
#
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead)) {#
		combos <- combn(1:nrow(live),2)#
		sim <- sapply(seq.int(ncol(combos)), function(i) simMeasures(live[combos[1,i],], live[combos[2,i],]), simplify=TRUE)#
		#sim <- combn(live, 2, simMeasures(live))	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]), simplify=TRUE)#
	}#
	return(as.data.frame(t(sim)))#
}#
#
# Parse Data--time averaging#
parseDataTimeAvg <- function(x, region) {	#
	if(region == "all") {#
		ages <- x#
	} else if(region == "all but San Diego") {#
		ages <- subset(x, Region != "San Diego")#
	} else {#
		ages <- subset(x, Region == region)#
	}#
	return(ages)#
}#
#
topLabel <- function(region) {	#
	if(region == "all") {#
		topLabel <- "Viewing specimens from all regions."#
	} else if(region == "all but San Diego") {#
		topLabel <- "Viewing specimens from all regions, except San Diego."#
	} else {#
		topLabel <- paste0("Viewing specimens from the ", region, " region.")#
	}#
	return(topLabel)#
}#
#
taModel <- function(nT, pDest, pImmig, pDeath) {#
	#nT <- 100#
	#pDest <- 0.02#
	#pImmig <- 0.25#
	#pDeath <- 0.9#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
#
	liveCom <- table(factor(sample(metaComm, 50, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAssemb <- sample(deathAssemb, length(deathAssemb))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		livingAssemb <- sample(livingAssemb, length(livingAssemb))#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
	}#
	output <- rbind(initStats, output)#
	#print(output)#
	#return(output)#
}
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px")#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					#sliderInput(inputId = "timeavg",#
					#	label="Years shells persist in death assemblage:",#
					#	min = 2, max = 200,#
					#	value = 50),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/10, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/pImmig=input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS_liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.9)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=100, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.7)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,4.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.7)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 60,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.3)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 1000,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=1000, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.8)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.5),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 1000,#
						value = 10),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 2),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$deadS/modRes$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$chao.jaccard, 1:nrow(modRes), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
?lnorm
?rnorm
rlnorm(10)
hist(rlnorm(1000))
hist(ceiling(rlnorm(1000)))
ceiling(rlnorm(10))
range(ceiling(rlnorm(2000)))
?rlnorm
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=1.5)))
range(ceiling(rlnorm(2000, sdlog=1.5)))
range(ceiling(rlnorm(2000, sdlog=1.5)))
range(ceiling(rlnorm(2000, sdlog=1.5)))
range(ceiling(rlnorm(2000, sdlog=1.5)))
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=2)))
range(ceiling(rlnorm(2000, sdlog=2)))
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 2),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "600px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		par(mfrow=c(1,2), pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 2),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 2),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 2),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=1/input$timeavg, pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells")#
	})#
}#
#
shinyApp(ui = ui, server = server)
1/80
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells")#
	})#
}#
#
shinyApp(ui = ui, server = server)
?runif
hist(ceiling(rlnorm(1000, sdlog=2)))
hist(ceiling(rlnorm(1000, sdlog=2)))
hist(ceiling(rlnorm(1000, sdlog=3)))
getwd()
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))
tail(output)
head(output)
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.3#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
# decay death assemblage#
		deathCount <- table(deathAssemb)#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))
i
deathAssemb
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		print(length(deathAssemb))#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		print(paste(length(deathAssemb), " : ", length(deathAssemb[pTemp < pDest])))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
deathAssemb
died
# drop empty species and sites#
dropEmpty <- function(live, dead, easteregg=NULL) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data -- live dead	#
parseDataLiveDead <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simMeasures <- function(x,y) {#
	comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
	common <- comm[,comm[1,] > 0 & comm[2,] > 0]#
	commonPct <- (comm/rowSums(comm))[,comm[1,] > 0 & comm[2,] > 0]#
	# bray-curtis#
	bray.curtis <- sum(abs(x-y))/sum(comm)#
	if(is.null(dim(common))) {#
		U <- commonPct[1]#
		V <- commonPct[2]#
		bray.curtis2 <- 1 - 2*min(common)/sum(comm)#
	} else {#
		U <- sum(commonPct[1,])#
		V <- sum(commonPct[2,])#
		bray.curtis2 <- 2*sum(apply(common, 2, min))/sum(comm)#
	}#
#
	# pct Sim#
	pctSim <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
	nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
	nTotal <- ncol(comm) # all present#
#
	#jaccard#
	jaccard <- nCommon / nTotal#
#
	# Chao–Jaccard for two assemblages = UV/(U + V − UV)#
	chao.jaccard <- U*V / (U+V-U*V)#
	sim <- c(bray.curtis2, bray.curtis, pctSim, jaccard, chao.jaccard)#
	names(sim) <- c('bray.curtis2','bray.curtis','pctSim','jaccard','chao.jaccard')#
	return(sim)#
}#
#
simCalc <- function(live, dead=NULL, easteregg=NULL) {#
	if(is.null(dead)) {#
		combos <- combn(1:nrow(live),2)#
		sim <- sapply(seq.int(ncol(combos)), function(i) simMeasures(live[combos[1,i],], live[combos[2,i],]), simplify=TRUE)#
		#sim <- combn(live, 2, simMeasures(live))	#
	} else if(is.element(class(live), c("integer","numeric"))) {#
		sim <- simMeasures(live, dead)#
	} else {#
		sim <- sapply(seq.int(nrow(live)), function(i) simMeasures(live[i,], dead[i,]), simplify=TRUE)#
	}#
	return(as.data.frame(t(sim)))#
}#
#
# Parse Data--time averaging#
parseDataTimeAvg <- function(x, region) {	#
	if(region == "all") {#
		ages <- x#
	} else if(region == "all but San Diego") {#
		ages <- subset(x, Region != "San Diego")#
	} else {#
		ages <- subset(x, Region == region)#
	}#
	return(ages)#
}#
#
topLabel <- function(region) {	#
	if(region == "all") {#
		topLabel <- "Viewing specimens from all regions."#
	} else if(region == "all but San Diego") {#
		topLabel <- "Viewing specimens from all regions, except San Diego."#
	} else {#
		topLabel <- paste0("Viewing specimens from the ", region, " region.")#
	}#
	return(topLabel)#
}#
#
taModel <- function(nT, pDest, pImmig, pDeath) {#
	nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		print(paste(length(deathAssemb), " : ", length(died)))#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))#
}
nT <- 100#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	for(i in 1:nT) {#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		print(paste(length(deathAssemb), " : ", length(died)))#
		deathAssemb <- c(deathAssemb, died)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
nT <- 20#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	deathCheck <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("death0","decayed","death1","died","death2")))))#
	lifeCheck <- data.frame(matrix(NA, nrow=nT, ncol=6, dimnames=(list(1:nT, c("life0","died","life1","born","immig","life2")))))#
	for(i in 1:nT) {#
		deathCheck$death0[i] <- length(deathAssemb)#
		lifeCheck$life0[i] <- length(livingAssemb)#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		deathCheck$decayed[i] <- length(pTemp[pTemp < pDest])#
		deathAssemb <- deathAssemb[pTemp < pDest]#
		deathCheck$death1[i] <- length(deathAssemb)#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathCheck$died[i] <- length(died)#
		lifeCheck$died[i] <- length(died)#
		print(paste(length(deathAssemb), " : ", length(died)))#
		deathAssemb <- c(deathAssemb, died)#
		deathCheck$death2[i] <- length(deathAssemb)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		lifeCheck$life1[i] <- length(livingAssemb)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		lifeCheck$born[i] <- length(born)#
		lifeCheck$immig[i] <- length(immigrants)#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		lifeCheck$life2[i] <- length(livingAssemb)#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
deathCheck
checkLife
lifeCheck
nT <- 20#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	deathCheck <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("death0","decayed","death1","died","death2")))))#
	lifeCheck <- data.frame(matrix(NA, nrow=nT, ncol=6, dimnames=(list(1:nT, c("life0","died","life1","born","immig","life2")))))#
	for(i in 1:nT) {#
		deathCheck$death0[i] <- length(deathAssemb)#
		lifeCheck$life0[i] <- length(livingAssemb)#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		deathCheck$decayed[i] <- length(pTemp[pTemp < pDest])#
		deathAssemb <- deathAssemb[pTemp >= pDest]#
		deathCheck$death1[i] <- length(deathAssemb)#
		deathAge <- deathAge[pTemp < pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		deathCheck$died[i] <- length(died)#
		lifeCheck$died[i] <- length(died)#
		print(paste(length(deathAssemb), " : ", length(died)))#
		deathAssemb <- c(deathAssemb, died)#
		deathCheck$death2[i] <- length(deathAssemb)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		lifeCheck$life1[i] <- length(livingAssemb)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		lifeCheck$born[i] <- length(born)#
		lifeCheck$immig[i] <- length(immigrants)#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		lifeCheck$life2[i] <- length(livingAssemb)#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
deathCheck
2000-30
2000-30+114
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells", main="Age Distribution")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells", main="Age Distribution")#
	})#
}#
#
shinyApp(ui = ui, server = server)
nT <- 500#
	pDest <- 1/80#
	pImmig <- 0.25#
	pDeath <- 0.6#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	deadIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	metaComm <- rep(names(colSums(deadIn)), colSums(deadIn))#
	#print(paste("The metacommunity has ",length(metaComm)," individuals & ",length(unique(metaComm)), " species."))#
	liveCom <- table(factor(sample(metaComm, 200, replace=TRUE), levels=unique(metaComm)))#
	deadCom <- table(factor(sample(metaComm, 2000, replace=TRUE), levels=unique(metaComm)))#
	initAssemb <- rbind(liveCom, deadCom)#
#
	initLive <- rep(names(liveCom), liveCom)#
	initDead <- rep(names(deadCom), deadCom)#
	# initial conditions	#
	initSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | initAssemb[2,]>0], initAssemb[2,initAssemb[1,]>0 | initAssemb[2,]>0])#
	initStats <- data.frame("deadN"=length(initDead),"liveN"=length(initLive),"deadS"=length(unique(initDead)),"liveS"=length(unique(initLive)),"deadS_liveS"=length(unique(sample(initDead,100)))/length(unique(sample(initLive,100))),"jaccard"=initSim$jaccard,"chao.jaccard"=initSim$chao.jaccard,"bray.curtis"=initSim$bray.curtis,"deltaSimInit"=NA)#
	liveCom <- rep(names(liveCom), liveCom)#
	deadCom <- rep(names(deadCom), deadCom)#
	livingAssemb <- sample(liveCom, length(liveCom))#
	deathAssemb <- sample(deadCom, length(deadCom))#
	deathAge <- ceiling(rlnorm(length(deathAssemb), sdlog=2))#
	output <- data.frame(matrix(NA, nrow=nT, ncol=9, dimnames=(list(1:nT, c("deadN","liveN","deadS","liveS","deadS_liveS","jaccard","chao.jaccard","bray.curtis","deltaSimInit")))))#
	#deathCheck <- data.frame(matrix(NA, nrow=nT, ncol=5, dimnames=(list(1:nT, c("death0","decayed","death1","died","death2")))))#
	#lifeCheck <- data.frame(matrix(NA, nrow=nT, ncol=6, dimnames=(list(1:nT, c("life0","died","life1","born","immig","life2")))))#
	for(i in 1:nT) {#
		#deathCheck$death0[i] <- length(deathAssemb)#
		#lifeCheck$life0[i] <- length(livingAssemb)#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		#deathCheck$decayed[i] <- length(pTemp[pTemp < pDest])#
		deathAssemb <- deathAssemb[pTemp >= pDest]#
		#deathCheck$death1[i] <- length(deathAssemb)#
		deathAge <- deathAge[pTemp >= pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		#deathCheck$died[i] <- length(died)#
		#lifeCheck$died[i] <- length(died)#
		deathAssemb <- c(deathAssemb, died)#
		#deathCheck$death2[i] <- length(deathAssemb)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		#lifeCheck$life1[i] <- length(livingAssemb)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		#lifeCheck$born[i] <- length(born)#
		#lifeCheck$immig[i] <- length(immigrants)#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		lifeCheck$life2[i] <- length(livingAssemb)#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))#
	}#
	output <- rbind(initStats, output)#
	#print(tail(output))#
	return(list("output"=output, "deathAge"=deathAge))
i
#deathCheck$death0[i] <- length(deathAssemb)#
		#lifeCheck$life0[i] <- length(livingAssemb)#
		# decay death assemblage#
		pTemp <- runif(length(deathAssemb))#
		#deathCheck$decayed[i] <- length(pTemp[pTemp < pDest])#
		deathAssemb <- deathAssemb[pTemp >= pDest]#
		#deathCheck$death1[i] <- length(deathAssemb)#
		deathAge <- deathAge[pTemp >= pDest]#
		#destroyed <- table(factor(deathAssemb[pTemp < pDest], levels=names(deathCount)))#
		#deathAssemb <- rep(names(deathCount - destroyed), deathCount - destroyed)#
		# add new dead individuals to death assemblage#
		pTemp <- runif(length(livingAssemb))#
		died <- livingAssemb[pTemp < pDeath]#
		#deathCheck$died[i] <- length(died)#
		#lifeCheck$died[i] <- length(died)#
		deathAssemb <- c(deathAssemb, died)#
		#deathCheck$death2[i] <- length(deathAssemb)#
		deathAge <- c(deathAge, rep(0, length(died)))#
		#remove dead individuals from living assemblage#
		livingCount <- table(livingAssemb)#
		diedCount <- table(factor(died, levels=names(livingCount)))#
		livingAssemb <- rep(names(livingCount - diedCount), livingCount - diedCount)#
		#lifeCheck$life1[i] <- length(livingAssemb)#
		# add new births and immigrations#
		birth_immig <- runif(length(died))#
		born <- sample(livingAssemb, length(birth_immig[birth_immig < 1-pImmig]), replace=TRUE) #
		immigrants <- sample(metaComm, length(died)-length(born))#
		#lifeCheck$born[i] <- length(born)#
		#lifeCheck$immig[i] <- length(immigrants)#
		if(length(born) > 0) {#
			livingAssemb <- c(livingAssemb, born)#
		}#
		if(length(immigrants) > 0) {#
			livingAssemb <- c(livingAssemb, immigrants)#
		}#
		lifeCheck$life2[i] <- length(livingAssemb)#
		# get stats#
		finalLive <- as.numeric(table(factor(livingAssemb, levels=unique(metaComm))))#
		finalDead <- as.numeric(table(factor(deathAssemb, levels=unique(metaComm))))#
		simStats <- simCalc(finalLive, finalDead)#
		output$deadS_liveS[i] <- length(unique(sample(deathAssemb,100)))/length(unique(sample(livingAssemb,100)))#
		output$liveN[i] <- length(livingAssemb)#
		output$deadN[i] <- length(deathAssemb)#
		output$liveS[i] <- length(unique(livingAssemb))#
		output$deadS[i] <- length(unique(deathAssemb))#
		output$jaccard[i] <- simStats$jaccard#
		output$chao.jaccard[i] <- simStats$chao.jaccard#
		output$bray.curtis[i] <- simStats$bray.curtis#
		# delta similarity from init#
		deltaSim <- simCalc(initAssemb[1,initAssemb[1,]>0 | finalLive > 0], finalLive[initAssemb[1,]>0 | finalLive > 0])#
		output$deltaSimInit[i] <- deltaSim$chao.jaccard#
		deathAge <- deathAge + 1#
		#print(range(deathAge))
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells", main="Age Distribution")#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1000px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells", main="Age Distribution")#
	})#
}#
#
shinyApp(ui = ui, server = server)
333 %% 2
32 %% 2
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1100px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		myBreaks <- seq(0,max(modRes$deathAge) + (max(modRes$deathAge) %% 2), 2)#
		hist(modRes$deathAge, xlab="Age (years)", ylab="Number of shells", main="Age Distribution")#
		box()#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Taphonomy, with examples from Southern California"),#
	tabsetPanel(type = "tabs", #
		tabPanel("Live-Dead Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(					#
					h3("Please be patient, page may take up to 30 seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					h5("All plots and statistics presented on the right are for the combination of environment and taxa selected below"),#
					br(),#
					# select environment#
					selectInput(inputId = "enviro",#
						label = "Environment:",#
						choices = c("all","intertidal sand flat","subtidal eel grass"),#
						selected = "all"),#
					br(),#
					# select taxon#
					selectInput(inputId = "taxa",#
						label = "Taxon:",#
						choices = c("all","Bivalvia","Gastropoda"),#
						selected = "all"),#
					br(),	#
					# select two columns to compare#
					strong("Select two sites to compare (see map) (this only changes part 5.)"),#
					p("Always select site 1 first."),#
					fluidRow(#
						column(6,#
							uiOutput("site1")#
						),#
						column(6,#
							uiOutput("site2")#
						),#
					),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Warme, J. E. 1971. Paleoecological aspects of a modern coastal lagoon.", em("University of California Publications in Geological Sciences"), "87:1-110."),#
					width=3,#
				),#
				mainPanel(					#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "liveDeadSelections"), style="color:blue")#
					),#
					## Number of Sites, species and occurrences (live and dead)#
					h3("1. Counts of Live and Dead Individuals & Species"),		#
					fluidRow(#
						div(tableOutput(outputId = "env_stats"), style = "font-size:120%")#
					), #
					## Live - Dead cross plots#
					fluidRow(#
						h3("2. Comparisons of Living and Death Assemblages"),#
						plotOutput(outputId = "liveDeadPlots", height = "550px", width = "1000px"),#
						h5("These two plots compare the numbers of species (left) and individuals (right) in the living and \#
						death assemblages. Each point is a site. The dashed line is the 1-to-1 line: samples that fall on the \#
						line have the same value in the living and death assemblages. Note that both axes are shown on a log-scale. \#
						This means that each change of one unit on the axis represents a factor-of-ten change in the data. \#
						We often plot data on a log-scale when the data span a large range in values and most are small.")#
					),#
					## aggregate Live - Dead similarity#
					fluidRow(#
						h3("3. Similarity between pooled living and death assembalges"),#
						div(tableOutput(outputId = "liveDeadSimPooled"), style = "font-size:120%")#
					),#
					## Live - Dead similarity#
					fluidRow(#
						h3("4. Similarity between live and death assembalges"),#
						plotOutput(outputId = "liveDeadSim", height = "500px", width = "500px"),#
						h5("Histogram of live-dead Jaccard similarities for individual sites.")#
					),#
					## Live - Dead comparison of two sites#
					fluidRow(#
						h3(textOutput(outputId = "compSelections")),#
						strong("Species Counts"),#
						tableOutput(outputId = "siteList")#
					),#
					fluidRow(#
						strong("Live-dead similarity"),#
						div(tableOutput(outputId = "siteListSim"), style = "font-size:120%")#
					),#
					## 6 similarity among living and among death assemblages#
					fluidRow(#
						h3("6. Similarity between sites within living and death assemblages"),#
						plotOutput(outputId = "liveDeadSim2", width="500px", height="1000px")#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Mugu Lagoon with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true", target="_blank"),#
					)#
				)#
			)	#
		),	#
		tabPanel("TIme-Averaging Data", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel(#
					# Nuculana_taphria#
					h2(em("Nuculana taphria")),#
					img(src='Nuculana_taphria.jpg', height = "145px", width = "250px"), # actual size: height = "370px", width = "640px"#
					h5("Scale bar is 1 mm", style="color:gray"),#
					h5("Image source: Tomašových et al. (2019).", style="color:gray"),#
					br(),#
					h5("All plots and statistics presented on the left are for the region selected below"),#
					br(),#
					# select region#
					selectInput(inputId = "region",#
						label = "Region:",#
						choices = c("all","Palos Verdes","San Diego","San Pedro","Santa Barbara","all but San Diego"),#
						selected = "all"),#
					br(),#
					# data citation#
					strong("Data Source:"),#
					shiny::p("Tomašových, A., Kidwell, S., & Barber, R. 2016. Inferring skeletal production from time-averaged assemblages: skeletal loss pulls the timing of production pulses towards the modern period.", em("Paleobiology"), "42(1), 54-76.", a(href="https://dx.doi.org/10.1017/pab.2015.30", "DOI: 10.1017/pab.2015.30", target="_blank")),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## Title with selections#
					fluidRow(#
						h2(textOutput(outputId = "timeAvgeSelections"), style="color:blue"),#
					),#
					## Age distribution of shells#
					h3("1. Age distribution of shells"),		#
					fluidRow(#
						plotOutput(outputId = "ageDist"),#
					), #
					## Age vs. Depth#
					h3("2. Age vs. Depth"),		#
					fluidRow(#
						plotOutput(outputId = "ageDepth", height = "600px", width = "600px"),#
					), #
					## Age vs. Size#
					h3("3. Age vs. Size"),		#
					fluidRow(#
						plotOutput(outputId = "ageSize", height = "600px", width = "600px"),#
					),#
					## Locality Map#
					fluidRow(#
						h3("Map of Southern California with Sample Locations"),#
						strong("Click on Map to download a larger version."),#
						# original image size: height = "1707px", width = "1800px"#
						a(img(src='TomasovychEtAl2016_Fig1.png', height = "759px", width = "800px"), href="https://github.com/naheim/shinypaleo/blob/master/timeAveraging/www/TomasovychEtAl2016_Fig1.png?raw=true", target="_blank"),#
					),#
				)#
			)#
		),#
		tabPanel("Time-Averaging Model", fluid = TRUE,#
			sidebarLayout(#
				sidebarPanel( #
					h3("Please be patient, page may take a few seconds to load", style="color:red"),#
					h5("Wiat until you see graphs appear", style="color:red"),#
					br(),#
					# select immigration probability#
					sliderInput(inputId = "immig",#
						label="Probability of immigration:",#
						min = 0.1, max = 0.9,#
						value = 0.1),#
					br(),	#
					# select level of averaging--shell lifetime#
					sliderInput(inputId = "timeavg",#
						label="Years shells persist in death assemblage:",#
						min = 2, max = 100,#
						value = 80),#
					# giving credit#
					shiny::p("Model inspired by", a(href="https://people.ucsc.edu/~mclapham/", "Matthew Clapham", target="_blank"), "and written by Noel Heim"),#
					# add more selections here#
					width=3#
				),#
				mainPanel(#
					## model results#
					h3("Time-averaging and diversity"),		#
					fluidRow(#
						plotOutput(outputId = "modelResults", height = "1100px", width = "900px"),#
					)#
				)#
			)	#
		)#
	)#
)#
#
server <- function(input, output, session) {#
	##########
	##
	# Live-Dead Tab#
	##
	##########
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	deadIn[,species$Class == 'Bivalvia'] <- floor(deadIn[,species$Class == 'Bivalvia']/2)#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn, "thisegg")#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Live-Dead Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseDataLiveDead(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# make selection header#
	output$liveDeadSelections <- renderText({#
		paste0("Viewing ", input$taxa, " species in ", input$enviro, " environments.")#
	})#
	# make header in main section showing comparison#
	output$compSelections <- renderText({#
		paste0("5. ", input$site1, " vs. ", input$site2)#
	})#
	# make species lists for two sites#
	output$siteList <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
#
		spNames <- sub("_", " ", colnames(newLive2))#
		siteTable <- data.frame('Class'=species$Class[match(spNames, species$taxonName)], 'Species'=spNames, 'live1'=as.integer(newLive2[1,]), 'dead1'=as.integer(newDead2[1,]), 'live2'=as.integer(newLive2[2,]), 'dead2'=as.integer(newDead2[2,]), check.names=FALSE)#
		colnames(siteTable)[3:6] <- c(paste0(input$site1,":live"), paste0(input$site1,":dead"),paste0(input$site2,":live"), paste0(input$site2,":dead"))#
		# add total#
		siteTable <- rbind(siteTable, c("","Total Counts", colSums(siteTable[,3:6])))#
	}, digits=0)#
	# similarities for two sites#
	output$siteListSim <- renderTable({#
		req(input$site1, input$site2)#
		newLive <- tempLive()[match(c(input$site1, input$site2), rownames(tempLive())),]#
		newDead <- tempDead()[match(c(input$site1, input$site2), rownames(tempDead())),]#
		nLiveSp2 <- colSums(newLive)#
		nDeadSp2 <- colSums(newDead)#
		newLive2 <- newLive[,nLiveSp2 > 0 | nDeadSp2 > 0] #
		newDead2 <- newDead[,nLiveSp2 > 0 | nDeadSp2 > 0]#
		sim <- simCalc(newLive2, newDead2)#
		sim <- data.frame(sim[,match(c("chao.jaccard"), colnames(sim))])#
		colnames(sim) <- c("Chao-Jaccard similarity index")#
		rownames(sim) <- c(input$site1, input$site2)#
		sim#
	}, rownames=TRUE)#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Individuals"=nOccur)#
#
	}, rownames=TRUE, digits=0)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live individuals", ylab="Number of dead individuals", main="Individuals", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	reactive({print(colSums(tempLive()))})#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim <- data.frame("Chao-Jaccard similarity index"=sim$chao.jaccard, check.names = FALSE)#
		sim#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,1))#
		hist(sim$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Dead Similarity")#
		box()	#
	})#
	# plot similarity among live and dead samlpes#
	output$liveDeadSim2 <- renderPlot({#
		simLive <- simCalc(tempLive(), NULL)#
		simDead <- simCalc(tempDead(), NULL)#
		par(cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(2,1))#
		hist(simLive$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Live-Live Similarity")#
		box()#
		hist(simDead$chao.jaccard, breaks=seq(0,1,0.05), xlab="Chao-Jaccard similarity index", ylab="Number of sites", main="Dead-Dead Similarity")#
		box()	#
	})#
	## generate dynamic menus for selecting two sites for comparison#
	output$site1 <- renderUI({#
		sites <- rownames(tempLive())#
		selectInput(inputId = "site1",#
			label = "Site 1:",#
			choices = sites)#
	})#
	output$site2 <- renderUI({#
		req(input$site1)#
		sites <- rownames(tempLive())#
		sites <- sites[!is.element(sites, input$site1)]#
		selectInput(inputId = "site2",#
			label = "Site 2:",#
			choices = sites,#
			selected = "site_2")#
	})#
	##########
	##
	# Time-Averaging Tabs#
	##
	##########
	rawData <- read.delim(file="tomasovychAges.tsv")#
	# Parse Data		#
	ages <- reactive({#
		parseDataTimeAvg(rawData, input$region)#
	})#
	topLab <- reactive ({#
		topLabel(input$region)#
	})#
	# make selection header#
	output$timeAvgeSelections <- renderText({#
		topLab()#
	})#
	# plot age distribution#
	output$ageDist <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		counter <- 500#
		maxX <- max(myAges) + counter - (max(myAges) %% counter)#
		myBreaks <- seq(0, maxX, counter)#
		par(cex=1.5, las=1)#
		hist(myAges, breaks = myBreaks, xlab="Age (years before 2003)", ylab="Number of individuals", main="Age Distribution")#
		box()#
	})	#
	# plot age vs. depth#
	output$ageDepth <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		myDepth <- ages()[,match("Depth", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(myDepth[myAges>0], myAges[myAges>0], log="y", xlab="Water depth (m)", ylab="Age (years before 2003)")#
	})#
	# plot age vs. size#
	output$ageSize <- renderPlot({#
		myAges <- ages()[,match("Weighted.age", colnames(ages()))]#
		mySize <- ages()[,match("Height.complete.specimens", colnames(ages()))]#
		par(cex=1.5, las=1, pch=16)#
		plot(mySize[myAges>0], myAges[myAges>0], log="y", xlab="Shell height (mm)", ylab="Age (years before 2003)")#
	})#
	# simple time-averaging model#
	output$modelResults <- renderPlot({#
		modRes <- taModel(nT=500, pDest=(1/input$timeavg), pImmig=input$immig, pDeath=0.6)#
		layout(matrix(c(1:3,3), nrow=2, ncol=2, byrow=TRUE))#
		par(pch=16, las=1, cex=1.5)#
		plot(1:10, type="n", xlim=c(0.5,1.5), ylim=c(0,6.25), xaxt="n", xlab="", ylab="Richness inflation")#
		abline(h=1, lty=2)#
		boxplot(modRes$output$deadS/modRes$output$liveS, range=0, lwd=1.25, lty=1, add=TRUE)#
		plot(modRes$output$chao.jaccard, 1:nrow(modRes$output), xlim=c(0,1), xlab="Live-dead similarity", ylab="Years", type="l", lwd=1.25)#
		#mtext(paste("Variance in composition: ", signif(var(modRes$chao.jaccard),2), sep="", adj=0), side=3, cex=1.5)#
		#lines(modRes$deltaSimInit, 1:nrow(modRes), lwd=1.25, col='red')#
		myBreaks <- seq(0,max(modRes$deathAge) + (max(modRes$deathAge) %% 2), 2)#
		hist(modRes$deathAge, breaks=myBreaks, xlab="Age (years)", ylab="Number of shells", main="Age Distribution")#
		box()#
	})#
}#
#
shinyApp(ui = ui, server = server)
seq(0,max(modRes$deathAge), length.out=100)
max(seq(0,223, length.out=100))
max(seq(0,224, length.out=100))
q()
