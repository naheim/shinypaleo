1844
444+675+725
1844/12850
fish
fish <- read.csv(file="fishBaseSpecies.csv")
head(fish)
nrow(fish)
range(fish$maxlength)
tail(fish)
subset(fish, genus == 'Sicydium')
max(fish$fishbase_id)
subset(fish, genus == 'Parapercis')
subset(fish, genus == 'Parapercis' & species == 'shaoi')
subset(fish, genus == 'Etmopterus' & species == 'benchleyi')
69045  - max(fish$fishbase_id)
range(fish$nspecimens)
nrow(fish)
head(fish)
head(fish, 20)
head(rownames(fish))
tail(fish)
rownum <- rownames(fish)
head(rownum)
rownum <- rownames(fish); head(rownum)
rownum <- as.numeric(rownames(fish)); head(rownum)
rownum <- as.numeric(rownames(fish)) + 1; head(rownum)
head(subset(fish, fishbase_id != rownum)
)
head(fish, 20)
nrow(fish)
subset(fish, fishbase_id == 64)
#############################
#
setwd("~/Documents/DataSets/Warme_71")#
#
library(jsonlite)
rawData <- read.delim(file="Warme1971LiveDead.tsv", header=FALSE)#
bareData <- rawData[-(1:3), -(1:3)]#
#
species <- data.frame('Phylum'=rawData[-(1:3),1], 'Class'=rawData[-(1:3),1], 'Order'="", 'Family'="", 'Genus'=rawData[-(1:3),2], 'Species'=rawData[-(1:3),3], 'taxonName'=paste(rawData[-(1:3),2], rawData[-(1:3),3], sep=" "))#
nSpecies <- nrow(species)#
species$Phylum[is.element(species$Class, c('Gastropoda','Bivalvia'))] <- "Mollusca"#
species$Class[species$Phylum == 'Echinodermata'] <- "Echinoidea"#
species$Class[species$Phylum == 'Annelida'] <- "Polychaeta"#
species$Class[is.element(species$Phylum, c('Bryozoa','Chordata'))] <- ""#
species$Class[is.element(species$Genus, c('Hemigrapsus','Callianassa','crab parts'))] <- "Malacostraca"#
species$Class[is.element(species$Genus, c('barnacle fragments'))] <- "Maxillopoda"#
#
siteNames <- rawData[3,-(1:3)]#
nSites <- length(siteNames)#
liveCounts <- data.frame(matrix(0, nrow=nSites, ncol=nSpecies, dimnames=list(siteNames, species$taxonName)))#
deadCounts <- liveCounts#
#
# fill in counts#
for(i in 1:nSites) {#
	for(j in 1:nSpecies) {#
		thisCell <- bareData[j,i]#
		if(thisCell == "p") {			#
			liveCounts[i,j] <- 0#
			deadCounts[i,j] <- 999			#
		} else if(thisCell == "a") {#
			liveCounts[i,j] <- 0#
			deadCounts[i,j] <- 9999#
		} else if(thisCell != "") {#
			thisSplit <- unlist(strsplit(thisCell, ";"))#
			liveCounts[i,j] <- as.numeric(thisSplit[1])#
			deadCounts[i,j] <- as.numeric(thisSplit[2])#
		}#
	}#
}#
#
# GET WoRMS & PBDB INFO#
species$acceptedName <- ""#
species$authority <- ""#
species$acceptedGenus <- ""#
species$acceptedSpecies <- ""#
species$aphiaID <- NA#
species$pbdbID <- NA#
species$pbdbAcceptedID <- NA#
species$pbdbAcceptedName <- ""#
species$pbdbAcceptedAuthority <- ""#
species$nOccur <- NA#
species$fad_int <- ""#
species$pbdb_fad <- NA#
species$lad_int <- NA#
species$pbdb_lad <- ""#
runWorms <- TRUE#
for(i in 1:nrow(species)) {#
	if(!is.element(species$Species[i], c("","sp.","spp."))) {#
		if(runWorms) {#
		wormsUri <- URLencode(paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",species$taxonName[i],"?like=false&marine_only=true&offset=1", sep=""))#
		tryCatch({#
			worms <- jsonlite::fromJSON(wormsUri)#
		}, error=function(e){cat("WoRMS ERROR :",species$taxonName[i], "\n")})#
		if(exists("worms")) {#
			species$acceptedName[i] <- worms$valid_name[1]#
			species$authority[i] <- worms$valid_authority[1]#
			species$aphiaID[i] <- worms$valid_AphiaID[1]#
			thisSplit <- unlist(strsplit(worms$valid_name[1], " "))#
			species$acceptedGenus[i] <- thisSplit[1]#
			species$acceptedSpecies[i] <- thisSplit[2]#
			remove(worms)#
		}#
		}#
		if(species$acceptedName[i] == "") {#
			pbdbUri <- URLencode(paste("https://paleobiodb.org/data1.2/taxa/list.csv?taxon_name=",species$Class[i],":",species$taxonName[i],"&show=app,class,attr", sep=""))#
		} else {#
			pbdbUri <- URLencode(paste("https://paleobiodb.org/data1.2/taxa/list.csv?taxon_name=",species$Class[i],":",species$acceptedName[i],"&show=app,class,attr", sep=""))		#
		}#
		pbdb <- read.csv(pbdbUri)#
		if(nrow(pbdb) == 1) {#
			species$pbdbID[i] <- pbdb$taxon_no[1]		#
			species$nOccur[i] <- pbdb$n_occs[1]#
			species$fad_int[i] <- pbdb$early_interval[1]#
			species$pbdb_fad[i] <- pbdb$firstapp_max_ma[1]#
			species$lad_int[i] <- pbdb$late_interval[1]#
			species$pbdb_lad[i] <- pbdb$lastapp_min_ma[1]#
#
			species$pbdbAcceptedID[i] <- pbdb$accepted_no[1]#
			species$pbdbAcceptedName[i] <- pbdb$accepted_name[1]#
			species$pbdbAcceptedAuthority[i] <- pbdb$taxon_attr[1]#
		}#
	}#
}
head(liveCounts)
ncol(liveCounts)
nrow(species)
head(species)
head(species$taxonName)
head(rownames(liveCounts))
head(colnames(liveCounts))
formNames <- species$taxonName
formNames
grepr( )
?grepl
sub(" sp.", "_sp", formNames)
? trim
? stripWhitespace
formNames <- trimws(species$taxonName)
formNames
formNames <- trimws(species$taxonName)
formNames <- sub(" sp.", "_sp", formNames)
formNames
formNames <- sub(" ", "_", formNames)
formNames <- trimws(species$taxonName)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("(", "", formNames)#
formNames <- sub(")", "", formNames)
formNames
formNames <- sub("\(", "", formNames)
formNames <- sub("\\(", "", formNames)
formNames
formNames <- trimws(species$taxonName)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames
formNames <- trimws(species$taxonName)#
formNames <- sub(" sp.", "_sp", formNames)
formNames
formNames <- trimws(species$taxonName)
formNames
formNames <- trimws(species$taxonName)#
formNames <- sub(" spp.", "_spp", formNames)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames
formNames <- trimws(species$taxonName)#
formNames <- sub(" spp.", "_spp", formNames)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames <- sub(".", "", formNames)#
formNames
formNames <- trimws(species$taxonName)#
formNames <- sub(" spp.", "_spp", formNames)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames <- sub("\\.", "", formNames)#
formNames
rawData <- read.delim(file="Warme1971LiveDead.tsv", header=FALSE)#
bareData <- rawData[-(1:3), -(1:3)]#
#
species <- data.frame('Phylum'=rawData[-(1:3),1], 'Class'=rawData[-(1:3),1], 'Order'="", 'Family'="", 'Genus'=rawData[-(1:3),2], 'Species'=rawData[-(1:3),3], 'taxonName'=paste(rawData[-(1:3),2], rawData[-(1:3),3], sep=" "))#
nSpecies <- nrow(species)#
species$Phylum[is.element(species$Class, c('Gastropoda','Bivalvia'))] <- "Mollusca"#
species$Class[species$Phylum == 'Echinodermata'] <- "Echinoidea"#
species$Class[species$Phylum == 'Annelida'] <- "Polychaeta"#
species$Class[is.element(species$Phylum, c('Bryozoa','Chordata'))] <- ""#
species$Class[is.element(species$Genus, c('Hemigrapsus','Callianassa','crab parts'))] <- "Malacostraca"#
species$Class[is.element(species$Genus, c('barnacle fragments'))] <- "Maxillopoda"#
#
formNames <- trimws(species$taxonName)#
formNames <- sub(" spp.", "_spp", formNames)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames <- sub("\\.", "", formNames)
head(species)
#############################
##
# This R script formats raw live-dead data from Warme 1971#
# Last Updated 02 August 2020 by NAH#
##
#############################
#
setwd("~/Documents/DataSets/Warme_71")#
#
library(jsonlite)#
rawData <- read.delim(file="Warme1971LiveDead.tsv", header=FALSE)#
bareData <- rawData[-(1:3), -(1:3)]#
#
species <- data.frame('Phylum'=rawData[-(1:3),1], 'Class'=rawData[-(1:3),1], 'Order'="", 'Family'="", 'Genus'=rawData[-(1:3),2], 'Species'=rawData[-(1:3),3], 'taxonName'=paste(rawData[-(1:3),2], rawData[-(1:3),3], sep=" "))#
nSpecies <- nrow(species)#
species$Phylum[is.element(species$Class, c('Gastropoda','Bivalvia'))] <- "Mollusca"#
species$Class[species$Phylum == 'Echinodermata'] <- "Echinoidea"#
species$Class[species$Phylum == 'Annelida'] <- "Polychaeta"#
species$Class[is.element(species$Phylum, c('Bryozoa','Chordata'))] <- ""#
species$Class[is.element(species$Genus, c('Hemigrapsus','Callianassa','crab parts'))] <- "Malacostraca"#
species$Class[is.element(species$Genus, c('barnacle fragments'))] <- "Maxillopoda"#
#
formNames <- trimws(species$taxonName)#
formNames <- sub(" spp.", "_spp", formNames)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames <- sub("\\.", "", formNames)#
#
siteNames <- rawData[3,-(1:3)]#
nSites <- length(siteNames)#
liveCounts <- data.frame(matrix(0, nrow=nSites, ncol=nSpecies, dimnames=list(siteNames, formNames)))#
deadCounts <- liveCounts#
#
# fill in counts#
for(i in 1:nSites) {#
	for(j in 1:nSpecies) {#
		thisCell <- bareData[j,i]#
		if(thisCell == "p") {			#
			liveCounts[i,j] <- 0#
			deadCounts[i,j] <- 999			#
		} else if(thisCell == "a") {#
			liveCounts[i,j] <- 0#
			deadCounts[i,j] <- 9999#
		} else if(thisCell != "") {#
			thisSplit <- unlist(strsplit(thisCell, ";"))#
			liveCounts[i,j] <- as.numeric(thisSplit[1])#
			deadCounts[i,j] <- as.numeric(thisSplit[2])#
		}#
	}#
}#
#
# GET WoRMS & PBDB INFO#
species$acceptedName <- ""#
species$authority <- ""#
species$acceptedGenus <- ""#
species$acceptedSpecies <- ""#
species$aphiaID <- NA#
species$pbdbID <- NA#
species$pbdbAcceptedID <- NA#
species$pbdbAcceptedName <- ""#
species$pbdbAcceptedAuthority <- ""#
species$nOccur <- NA#
species$fad_int <- ""#
species$pbdb_fad <- NA#
species$lad_int <- NA#
species$pbdb_lad <- ""#
runWorms <- TRUE#
for(i in 1:nrow(species)) {#
	if(!is.element(species$Species[i], c("","sp.","spp."))) {#
		if(runWorms) {#
		wormsUri <- URLencode(paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",species$taxonName[i],"?like=false&marine_only=true&offset=1", sep=""))#
		tryCatch({#
			worms <- jsonlite::fromJSON(wormsUri)#
		}, error=function(e){cat("WoRMS ERROR :",species$taxonName[i], "\n")})#
		if(exists("worms")) {#
			species$acceptedName[i] <- worms$valid_name[1]#
			species$authority[i] <- worms$valid_authority[1]#
			species$aphiaID[i] <- worms$valid_AphiaID[1]#
			thisSplit <- unlist(strsplit(worms$valid_name[1], " "))#
			species$acceptedGenus[i] <- thisSplit[1]#
			species$acceptedSpecies[i] <- thisSplit[2]#
			remove(worms)#
		}#
		}#
		if(species$acceptedName[i] == "") {#
			pbdbUri <- URLencode(paste("https://paleobiodb.org/data1.2/taxa/list.csv?taxon_name=",species$Class[i],":",species$taxonName[i],"&show=app,class,attr", sep=""))#
		} else {#
			pbdbUri <- URLencode(paste("https://paleobiodb.org/data1.2/taxa/list.csv?taxon_name=",species$Class[i],":",species$acceptedName[i],"&show=app,class,attr", sep=""))		#
		}#
		pbdb <- read.csv(pbdbUri)#
		if(nrow(pbdb) == 1) {#
			species$pbdbID[i] <- pbdb$taxon_no[1]		#
			species$nOccur[i] <- pbdb$n_occs[1]#
			species$fad_int[i] <- pbdb$early_interval[1]#
			species$pbdb_fad[i] <- pbdb$firstapp_max_ma[1]#
			species$lad_int[i] <- pbdb$late_interval[1]#
			species$pbdb_lad[i] <- pbdb$lastapp_min_ma[1]#
#
			species$pbdbAcceptedID[i] <- pbdb$accepted_no[1]#
			species$pbdbAcceptedName[i] <- pbdb$accepted_name[1]#
			species$pbdbAcceptedAuthority[i] <- pbdb$taxon_attr[1]#
		}#
	}#
}#
write.table(liveCounts, file="warmeLive.tsv", sep="\t", quote=FALSE, row.names=TRUE, na="")#
write.table(deadCounts, file="warmeDead.tsv", sep="\t", quote=FALSE, row.names=TRUE, na="")
x <- read.delim(file="warmeLive.tsv")
head(x)
range(colSums(x))
setwd("~/Documents/DataSets/Warme_71")#
#
library(jsonlite)#
rawData <- read.delim(file="Warme1971LiveDead.tsv", header=FALSE)#
bareData <- rawData[-(1:3), -(1:3)]#
#
species <- data.frame('Phylum'=rawData[-(1:3),1], 'Class'=rawData[-(1:3),1], 'Order'="", 'Family'="", 'Genus'=rawData[-(1:3),2], 'Species'=rawData[-(1:3),3], 'taxonName'=paste(rawData[-(1:3),2], rawData[-(1:3),3], sep=" "))#
nSpecies <- nrow(species)#
species$Phylum[is.element(species$Class, c('Gastropoda','Bivalvia'))] <- "Mollusca"#
species$Class[species$Phylum == 'Echinodermata'] <- "Echinoidea"#
species$Class[species$Phylum == 'Annelida'] <- "Polychaeta"#
species$Class[is.element(species$Phylum, c('Bryozoa','Chordata'))] <- ""#
species$Class[is.element(species$Genus, c('Hemigrapsus','Callianassa','crab parts'))] <- "Malacostraca"#
species$Class[is.element(species$Genus, c('barnacle fragments'))] <- "Maxillopoda"#
#
formNames <- trimws(species$taxonName)#
formNames <- sub(" spp.", "_spp", formNames)#
formNames <- sub(" sp.", "_sp", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub(" ", "_", formNames)#
formNames <- sub("\\(", "", formNames)#
formNames <- sub(")", "", formNames)#
formNames <- sub("\\.", "", formNames)#
#
siteNames <- rawData[3,-(1:3)]#
nSites <- length(siteNames)#
liveCounts <- data.frame(matrix(0, nrow=nSites, ncol=nSpecies, dimnames=list(siteNames, formNames)))#
deadCounts <- liveCounts#
#
# fill in counts#
for(i in 1:nSites) {#
	for(j in 1:nSpecies) {#
		thisCell <- bareData[j,i]#
		if(thisCell == "p") {			#
			liveCounts[i,j] <- 999#
			deadCounts[i,j] <- 999			#
		} else if(thisCell == "a") {#
			liveCounts[i,j] <- 9999#
			deadCounts[i,j] <- 9999#
		} else if(thisCell != "") {#
			thisSplit <- unlist(strsplit(thisCell, ";"))#
			liveCounts[i,j] <- as.numeric(thisSplit[1])#
			deadCounts[i,j] <- as.numeric(thisSplit[2])#
		}#
	}#
}#
write.table(liveCounts, file="warmeLive.tsv", sep="\t", quote=FALSE, row.names=TRUE, na="")#
write.table(deadCounts, file="warmeDead.tsv", sep="\t", quote=FALSE, row.names=TRUE, na="")
x <- read.delim(file="warmeLive.tsv")
range(colSums(x))
colnames(x)[colSums(x)==0]
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
liveCounts <- read.delim(file="warmeLive.tsv")
head(liveCounts)
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
renderTable(t(liveCounts) rownames=TRUE)
runGitHub("shinypaleo", "naheim", subdir="liveDead")
hist(liveCounts)
head(liveCounts)
match("Hemigrapsus_oregonensis", colnames(liveCounts))
1:match("Hemigrapsus_oregonensis", colnames(liveCounts))
liveCounts <- read.delim(file="warmeLive.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]
head(liveCounts)
range(liveCounts)
deadCounts <- read.delim(file="warmeDead.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]
head(deadCounts)
range(deadCounts)
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
tag$div(class="container-fluid")
library(shiny)#
ui <- fluidPage(#
	tag$div(class="container-fluid")#
	selectInput(inputId = "n_breaks",#
			  label = "Number of bins in histogram (approximate):",#
			  choices = c(10, 20, 35, 50),#
			  selected = 20),#
#
	checkboxInput(inputId = "individual_obs",#
				label = strong("Show individual observations"),#
				value = FALSE),#
#
	checkboxInput(inputId = "density",#
				label = strong("Show density estimate"),#
				value = FALSE),#
#
	plotOutput(outputId = "main_plot", height = "300px"),#
	tableOutput(outputId = "livefile"),#
#
	# Display this only if the density is shown#
	conditionalPanel(condition = "input.density == true",#
	sliderInput(inputId = "bw_adjust",#
				label = "Bandwidth adjustment:",#
				min = 0.2, max = 2, value = 1, step = 0.2)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- reactivePlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
