2800/30
(2800*12)/365
(2800*12)/366
732/4
library(shiny)#
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="testApp")
runGitHub("shinypaleo", "naheim", subdir="testApp")
runGitHub("shinypaleo", "naheim", subdir="testApp")
library(shiny)#
ui <- bootstrapPage(#
	selectInput(inputId = "n_breaks",#
			  label = "Number of bins in histogram (approximate):",#
			  choices = c(10, 20, 35, 50),#
			  selected = 20),#
#
	checkboxInput(inputId = "individual_obs",#
				label = strong("Show individual observations"),#
				value = FALSE),#
#
	checkboxInput(inputId = "density",#
				label = strong("Show density estimate"),#
				value = FALSE),#
#
	plotOutput(outputId = "main_plot", height = "300px"),#
	tableOutput(outputId = "livefile"),#
#
	# Display this only if the density is shown#
	conditionalPanel(condition = "input.density == true",#
	sliderInput(inputId = "bw_adjust",#
				label = "Bandwidth adjustment:",#
				min = 0.2, max = 2, value = 1, step = 0.2)#
	)#
)#
#
server <- function(input, output) {#
	liveforams <- read.delim(file="MilkenEtAl2015_live.txt")#
	colnames(liveforams) <- liveforams[1,]#
	liveforams <- [-1,]#
	liveCounts <- colSums(liveforams[,-(1:3)])#
	output$livefile <- renderTable(t(liveCounts) rownames=TRUE)  #
	output$main_plot <- reactivePlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- bootstrapPage(#
	selectInput(inputId = "n_breaks",#
			  label = "Number of bins in histogram (approximate):",#
			  choices = c(10, 20, 35, 50),#
			  selected = 20),#
#
	checkboxInput(inputId = "individual_obs",#
				label = strong("Show individual observations"),#
				value = FALSE),#
#
	checkboxInput(inputId = "density",#
				label = strong("Show density estimate"),#
				value = FALSE),#
#
	plotOutput(outputId = "main_plot", height = "300px"),#
	tableOutput(outputId = "livefile"),#
#
	# Display this only if the density is shown#
	conditionalPanel(condition = "input.density == true",#
	sliderInput(inputId = "bw_adjust",#
				label = "Bandwidth adjustment:",#
				min = 0.2, max = 2, value = 1, step = 0.2)#
	)#
)#
#
server <- function(input, output) {#
	liveforams <- read.delim(file="MilkenEtAl2015_live.txt")#
	colnames(liveforams) <- liveforams[1,]#
	liveforams <- [-1,]#
	liveCounts <- colSums(liveforams[,-(1:3)])#
	output$livefile <- renderTable(t(liveCounts) rownames=TRUE)  #
	output$main_plot <- reactivePlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
liveforams <- read.delim(file="MilkenEtAl2015_live.txt")
colnames(liveforams) <- liveforams[1,]
liveforams <- [-1,]
library(shiny)#
ui <- bootstrapPage(#
	selectInput(inputId = "n_breaks",#
			  label = "Number of bins in histogram (approximate):",#
			  choices = c(10, 20, 35, 50),#
			  selected = 20),#
#
	checkboxInput(inputId = "individual_obs",#
				label = strong("Show individual observations"),#
				value = FALSE),#
#
	checkboxInput(inputId = "density",#
				label = strong("Show density estimate"),#
				value = FALSE),#
#
	plotOutput(outputId = "main_plot", height = "300px"),#
	tableOutput(outputId = "livefile"),#
#
	# Display this only if the density is shown#
	conditionalPanel(condition = "input.density == true",#
	sliderInput(inputId = "bw_adjust",#
				label = "Bandwidth adjustment:",#
				min = 0.2, max = 2, value = 1, step = 0.2)#
	)#
)#
#
server <- function(input, output) {#
	liveforams <- read.delim(file="MilkenEtAl2015_live.txt")#
	colnames(liveforams) <- liveforams[1,]#
	liveforams <- liveforams[-1,]#
	liveCounts <- colSums(liveforams[,-(1:3)])#
	output$livefile <- renderTable(t(liveCounts) rownames=TRUE)  #
	output$main_plot <- reactivePlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
liveforams <- read.delim(file="MilkenEtAl2015_live.txt")#
	colnames(liveforams) <- liveforams[1,]#
	liveforams <- liveforams[-1,]#
	liveCounts <- colSums(liveforams[,-(1:3)])
runGitHub("shinypaleo", "naheim", subdir="testApp")
runGitHub("shinypaleo", "naheim", subdir="testApp")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
liveCounts <- read.delim(file="warmeLive.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]
liveCounts <- read.delim(file="warmeLive.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]
getwd()
liveCounts <- read.delim(file="warmeLive.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]
liveCounts <- read.delim(file="warmeLive.tsv")
head(liveCounts)
1:match("Hemigrapsus_oregonensis", colnames(liveCounts))
liveCounts <- read.delim(file="warmeLive.tsv")[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]
remove(liveCounts)
runGitHub("shinypaleo", "naheim", subdir="liveDead")
faithful$eruptions
?faithful
hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")
hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(20),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="testApp")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California!🏴󠁵󠁳󠁣󠁡󠁿"),#
	sidebarLayout(#
#
		sidebarPanel(#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500)#
		),#
#
		mainPanel(#
			fluidRow(#
			column(3, selectInput(inputId = "n_breaks",#
					  label = "Number of bins in histogram (approximate):",#
					  choices = c(10, 20, 35, 50),#
					  selected = 20),#
					),#
#
			column(3, checkboxInput(inputId = "individual_obs",#
						label = strong("Show individual observations"),#
						value = FALSE),#
					),#
#
			column(3, checkboxInput(inputId = "density",#
						label = strong("Show density estimate"),#
						value = FALSE),#
					)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			)#
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California!🏴󠁵󠁳󠁣󠁡󠁿"),#
	sidebarLayout(#
#
		sidebarPanel(#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500)#
		),#
#
		mainPanel(#
			fluidRow(#
			column(3, selectInput(inputId = "n_breaks",#
					  label = "Number of bins in histogram (approximate):",#
					  choices = c(10, 20, 35, 50),#
					  selected = 20),#
					),#
#
			column(3, checkboxInput(inputId = "individual_obs",#
						label = strong("Show individual observations"),#
						value = FALSE),#
					),#
#
			column(3, checkboxInput(inputId = "density",#
						label = strong("Show density estimate"),#
						value = FALSE),#
					)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			)#
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500)#
		),#
#
		mainPanel(#
			fluidRow(#
			column(3, selectInput(inputId = "n_breaks",#
					  label = "Number of bins in histogram (approximate):",#
					  choices = c(10, 20, 35, 50),#
					  selected = 20),#
					),#
#
			column(3, checkboxInput(inputId = "individual_obs",#
						label = strong("Show individual observations"),#
						value = FALSE),#
					),#
#
			column(3, checkboxInput(inputId = "density",#
						label = strong("Show density estimate"),#
						value = FALSE),#
					)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			)#
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, function() {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
?renderPlot
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500)#
		),#
#
		mainPanel(#
			fluidRow(#
			column(3, selectInput(inputId = "n_breaks",#
					  label = "Number of bins in histogram (approximate):",#
					  choices = c(10, 20, 35, 50),#
					  selected = 20),#
					),#
#
			column(3, checkboxInput(inputId = "individual_obs",#
						label = strong("Show individual observations"),#
						value = FALSE),#
					),#
#
			column(3, checkboxInput(inputId = "density",#
						label = strong("Show density estimate"),#
						value = FALSE),#
					)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			selectInput(inputId = "n_breaks",#
			  label = "Number of bins in histogram (approximate):",#
			  choices = c(10, 20, 35, 50),#
			  selected = 20),#
			),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500)#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500)#
		)#
	),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h2("Make Selections")#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h2("Make Selections"),#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			strong("Make Selections"),#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h5("Make Selections"),#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			selectInput(inputId = "n_breaks",#
				label = "Number of bins in histogram (approximate):",#
				choices = c(10, 20, 35, 50),#
				selected = 20),#
			br(),#
			sliderInput("obs", "Number of observations:",  min = 1, max = 1000, value = 500),#
			width=3,#
		),#
#
		mainPanel(#
			fluidRow(#
#
				column(3, checkboxInput(inputId = "individual_obs",#
					label = strong("Show individual observations"),#
					value = FALSE),#
				),#
#
				column(3, checkboxInput(inputId = "density",#
					label = strong("Show density estimate"),#
					value = FALSE),#
				)#
			), #
			fluidRow(#
				plotOutput(outputId = "main_plot", height = "300px"),#
			),#
			# Display this only if the density is shown#
			conditionalPanel(condition = "input.density == true",#
			sliderInput(inputId = "bw_adjust",#
						label = "Bandwidth adjustment:",#
						min = 0.2, max = 2, value = 1, step = 0.2)#
			),#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output) {#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	liveCounts <- liveCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	deadCounts <- deadCounts[,1:match("Hemigrapsus_oregonensis", colnames(liveCounts))]#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
	output$main_plot <- renderPlot(width = 400, height = 300, {#
#
		hist(faithful$eruptions,#
		  probability = TRUE,#
		  breaks = as.numeric(input$n_breaks),#
		  xlab = "Duration (minutes)",#
		  main = "Geyser eruption duration BOOM!")#
#
		if (input$individual_obs) {#
		  rug(faithful$eruptions)#
		}#
#
		if (input$density) {#
		  dens <- density(faithful$eruptions, adjust = input$bw_adjust)#
		  lines(dens, col = "blue")#
		}#
#
	}#
	)#
#
}#
#
shinyApp(ui = ui, server = server)
Q()
q()
