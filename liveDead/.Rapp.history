library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({parseData(deadCounts, input$taxa, input$enviro, species, environments)})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive)#
		nDeadSp <- colSums(tempDead)#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive), 'dead'=sum(tempDead))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive), 'dead'=sum(tempDead))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		#nLiveSp <- colSums(tempLive())#
		#nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
rm(list=ls())
tempLive
getwd()
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		#nLiveSp <- colSums(tempLive())#
		#nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
environments
environments
environments <- read.delim(file="warmeHeader.tsv")
environments
sort(environments[2,])
sort(environments[4,])
length(sort(environments[4,]))
sum(deadCounts)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2))#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "400px", width = "800px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2), cex=1.5)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2), cex=1.5)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)#
#liveList <- split(t(tempLive), 1:nrow(tempLive))#
#deadList <- split(t(tempDead), 1:nrow(tempDead))#
#mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")
sim
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSimm", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2), cex=1.5)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2), cex=1.5)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")
head(environments)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[4,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[4,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[4,], c("inter_barren","sub_eelgrass"))]
ncol(environments)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")
environments
is.element(environments[4,], c("inter_barren","sub_eelgrass"))
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]
nrow(environments)
ncol(environments)
nrow(liveCounts)
nrow(deadCounts)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		print(nDeadSite)#
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		print(nLiveSite);print(nDeadSite)#
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		print(nLiveSp);print(nDeadSp)#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		print(nLiveSp);print(nDeadSp)#
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
objects()
ncol(liveCounts)
ncol(deadCounts)
x <- colsums(deadCounts)
x <- colSums(deadCounts)
y <- colSums(liveCounts)
length()
length(y)
length(x)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		print(length(nDeadSp));print(length(nDeadSp))#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		print(nLiveSp);print(nDeadSp)#
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		print(length(nDeadSp));print(length(nDeadSp))#
#		print(nLiveSp);print(nDeadSp)#
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		print(class(nDeadSp));print(class(nDeadSp))#
#		print(nLiveSp);print(nDeadSp)#
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite > 0 & nDeadSite > 0] #
		nDeadSite <- nDeadSite[nLiveSite > 0 & nDeadSite > 0] #
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp > 0 & nDeadSp > 0] #
		nDeadSp <- nDeadSp[nLiveSp > 0 & nDeadSp > 0] #
		print(class(nDeadSp));print(nLiveSp)#
		print(class(nDeadSp));print(nDeadSp)#
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="horn")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(tempDead()), 1:nrow(tempDead()))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(liveCounts), 1:nrow(deadCounts))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="bray")
liveList <- split(t(liveCounts), 1:nrow(deadCounts))#
		deadList <- split(t(liveCounts), 1:nrow(deadCounts))#
		sim <- mapply(function(x,y, method){1-vegdist(rbind(x,y), method)}, x=liveList, y=deadList, method="bray")
sim
head(liveCOunts)
head(liveCounts)
liveList[[1]]
range(liveList[[1]] == liveCounts[1,])
liveCounts[1,]
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]
range(liveList[[1]] == liveCounts[1,])
liveList[[1]]
rbind(liveList[[1]], liveCounts[1,])
dim(liveCounts)
dim(liveList)
length(liveList)
liveList
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(), 1:nrow(tempDead()))#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(), 1:nrow(tempDead()))#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		liveList <- split(t(tempLive()), 1:nrow(tempLive()))#
		deadList <- split(t(), 1:nrow(tempDead()))#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
1-vegdist(liveCounts[1,], deadCounts[1,], method="bray")
liveCounts[1,]
deadCounts[1,]
length(deadCounts[1,])
length(liveCounts[1,])
class(liveCounts[1,])
?vegdist
?vegdist
1-vegdist(liveCounts[1,], deadCounts[1,], method="bray")
1-vegdist(as.numeric(liveCounts[1,]), as.numeric(deadCounts[1,]), method="bray")
1-vegdist(as.matrix(liveCounts[1,]), as.matrix(deadCounts[1,]), method="bray")
1-vegdist(rbind(liveCounts[1,]),deadCounts[1,]), method="bray")
1-vegdist(rbind(liveCounts[1,],deadCounts[1,]), method="bray")
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
comm
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
class(rbind(1:10,1:10))
class(as.matrix(rbind(1:10,1:10)))
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
cbind(colSums(liveCounts), colSums(deadCounts))
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	temp1 <- colSums(liveCounts)#
	temp2 <- colSums(deadCounts)#
	liveCounts <- subset(liveCounts, temp1 > 0 | temp1 > 0)#
	deadCounts <- subset(deadCounts, temp1 > 0 | temp1 > 0)#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	temp1 <- colSums(liveCounts)#
	temp2 <- colSums(deadCounts)#
	liveCounts <- subset(liveCounts, temp1 > 0 | temp1 > 0)#
	deadCounts <- subset(deadCounts, temp1 > 0 | temp1 > 0)
dim(deadCounts)
dim(liveCounts)
head(liveCounts)
range(colSums(liveCounts))
range(colSums(liveCounts))
range(colSums(liveCounts), na.rm=T)
colSums(liveCounts)
liveCounts
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	temp1 <- colSums(liveCounts)#
	temp2 <- colSums(deadCounts)#
	liveCounts <- liveCounts[, temp1 > 0 | temp1 > 0]#
	deadCounts <- deadCounts[, temp1 > 0 | temp1 > 0]
deadCounts
colSums(liveCounts)
dim(liveCounts)
dim(deadCounts)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	temp1 <- colSums(liveCounts)#
	temp2 <- colSums(deadCounts)#
	liveCounts <- liveCounts[, temp1 > 0 | temp2 > 0]#
	deadCounts <- deadCounts[, temp1 > 0 | temp2 > 0]
dim(liveCounts)
dim(deadCounts)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveCounts <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveCounts <- liveCounts[,is.element(colnames(liveCounts), species$colName) & !grepl("_sp", colnames(liveCounts))]#
	# drop minor environments#
	liveCounts <- liveCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadCounts <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadCounts <- deadCounts[,is.element(colnames(deadCounts), species$colName) & !grepl("_sp", colnames(deadCounts))]#
	# drop minor environments#
	deadCounts <- deadCounts[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	temp1 <- colSums(liveCounts)#
	temp2 <- colSums(deadCounts)#
	liveCounts <- liveCounts[, temp1 > 0 | temp2 > 0]#
	deadCounts <- deadCounts[, temp1 > 0 | temp2 > 0]#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	liveCounts <- tempCounts$dead#
	# Parse Data		#
	temp <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	temp1 <- temp()#
	temp <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	temp2 <- temp()#
	tempCounts <- dropEmpty(temp1, temp2)#
	tempLive <- tempCounts$live#
	tempDead <- tempCounts$dead#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive)#
		nDeadSite <- rowSums(tempDead)#
		nLiveSp <- colSums(tempLive)#
		nDeadSp <- colSums(tempDead)#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive)#
		nDeadSite2 <- rowSums(tempDead) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive)#
		nDeadSp2 <- colSums(tempDead)#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive, tempDead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	liveCounts <- tempCounts$dead#
	# Parse Data		#
	temp1 <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	temp2 <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempCounts <- dropEmpty(temp1(), temp2())#
	tempLive <- tempCounts$live#
	tempDead <- tempCounts$dead#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive)#
		nDeadSite <- rowSums(tempDead)#
		nLiveSp <- colSums(tempLive)#
		nDeadSp <- colSums(tempDead)#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive)#
		nDeadSite2 <- rowSums(tempDead) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive)#
		nDeadSp2 <- colSums(tempDead)#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive, tempDead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	liveCounts <- tempCounts$dead#
	# Parse Data		#
	temp1 <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	print(tmep1())#
	temp2 <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempCounts <- dropEmpty(temp1(), temp2())#
	tempLive <- tempCounts$live#
	tempDead <- tempCounts$dead#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive)#
		nDeadSite <- rowSums(tempDead)#
		nLiveSp <- colSums(tempLive)#
		nDeadSp <- colSums(tempDead)#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive)#
		nDeadSite2 <- rowSums(tempDead) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive)#
		nDeadSp2 <- colSums(tempDead)#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive, tempDead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	liveCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	x <- dropEmpty(tempLive(), tempDead())#
	print(x)#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	x <- reactive({dropEmpty(tempLive(), tempDead())})#
	print(x)#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	x <- reactive({dropEmpty(tempLive(), tempDead())})#
	print(x())#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	x <- reactive({dropEmpty(tempLive(), tempDead())})#
	print(x)#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	x <- reactive({dropEmpty(tempLive(), tempDead())})#
	print(x$live)#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	x <- reactive({dropEmpty(tempLive(), tempDead())})#
	print(x$live())#
#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(x$live)#
#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(x)#
#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(x())#
#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(x()$live)#
#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(x()$live)#
#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(solSums(x()$live))#
		print(solSums(x()$dead))#
#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(solSums(x()$live))#
		print(solSums(x()$dead))#
#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(colSums(x()$live))#
		print(colSums(x()$dead))#
#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(colSums(x()$dead[colSums(x()$dead == 0 & colSums(x()$live == 0]))#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(colSums(x()$dead[colSums(x()$dead == 0 & colSums(x()$live == 0]))#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		x <- reactive({dropEmpty(tempLive(), tempDead())})#
		print(colSums(x()$dead)[colSums(x()$dead) == 0 & colSums(x()$live) == 0])#
		sim <- simCalc(x()$live, x()$dead, method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="morisita")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim$bray, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "2000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,4))#
		hist(sim$bray, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
		plot(sim$bray, sim$horn)#
		plot(sim$bray, sim$morisita)#
		plot(sim$morisita, sim$horn)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "2000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,4))#
		hist(sim$bray, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
		plot(sim$bray, sim$horn)#
		plot(sim$bray, sim$morisita)#
		plot(sim$morisita, sim$horn)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "2000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,4))#
		hist(sim$bray, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
		plot(sim$bray, sim$horn)#
		plot(sim$bray, sim$morisita)#
		plot(sim$morisita, sim$horn)#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "2000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(vegan)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "2000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead(), method="bray")#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "600px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "2000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "600px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1)#
		hist(sim, breaks=seq(0,1,0.1), xlab="Morisita-Horn similarity index", ylab="Number of sites", main="Similarity")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		print(sim)#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead
liveCounts[3,]
deadCounts[3,]
i
i <- x <- live[i,] #
		y <- dead[i,]
i <- 3
x <- liveCounts[i,] #
		y <- deadCounts[i,]
comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		print(comm[,comm[1,] > 0 & comm[2,] > 0])#
		nCommon <- ncol(comm[,comm[1,] > 0 & comm[2,] > 0]) # common#
		nLive <- ncol(comm[,comm[1,] > 0 & comm[2,] == 0]) # only live#
		nDead <- ncol(comm[,comm[1,] == 0 & comm[2,] > 0]) # only dead#
		sim$jaccard[i] <- nCommon / nCommon + nLive + nDead
nCommon
nLive
nDead
ncol(comm[,comm[1,] > 0 & comm[2,] == 0])
comm
nCommon <- ncol(comm[,comm[1,] > 0 & comm[2,] > 0]) # common#
		nTotal <- ncol(comm) # all present
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
i
i <- 10
live <- liveCounts
dead <- deadCounts
sim <- data.frame(matrix(NA, nrow=nrow(live), ncol=2, dimnames=list(rownames(live), c("pctSim","jaccard"))))
x <- live[i,] #
		y <- dead[i,]#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(comm[,comm[1,] > 0 & comm[2,] > 0]) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal
nComm
nCommon
comm
comm[,comm[1,] > 0 & comm[2,] > 0]
class(comm[,comm[1,] > 0 & comm[2,] > 0])
data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])
ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0]))
ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0]))
x <- live[i,] #
		y <- dead[i,]#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "600px", width = "1200px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "600px", width = "1200px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex=2, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death <u>pooled</u> assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderText({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		renderTable(sim, rownames=TRUE) #
	}),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderText({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		renderTable(sim, rownames=TRUE) #
	}),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
live <- colSums(liveCounts)
dead <- colSums(deadCounts)
live
nrow(live)
class(live)
class(live) == "numeric"
n
sim <- data.frame(matrix(NA, nrow=nrow(live), ncol=2, dimnames=list(rownames(live), c("pctSim","jaccard"))))#
	if(class(live) == "numeric") {#
		n <- 1#
	} else {#
		n <- nrow(live)#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
#		print(sim)#
	}
sim
live
rownames(live)
if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list("1", c("pctSim","jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list(rownames(live), c("pctSim","jaccard"))))#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal
}
sim
sim$jaccaard
sim$jaccard
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderText({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		renderTable(sim, rownames=TRUE) #
	}),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		renderTable(sim, rownames=TRUE) #
	}),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead())) #
	}, rownames=TRUE),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	}),#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead())) #
	}, rownames=TRUE),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	}),#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead())) #
	}, rownames=TRUE),#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	}),#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead())) #
	}, rownames=TRUE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		colnames(sim) <- c("Percent Similarity", "Jaccard Similarity")#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim2 <- data.frame("Percent Similarity"=sim$pctSim, "Jaccard Similarity"=sim$jaccard)#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
live
dead
if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list("1", c("pctSim","jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list(rownames(live), c("pctSim","jaccard"))))#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
#		print(sim)#
	}
nCommon
nTotal
comm
for(i in 1:1) {print(i)}
if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list("1", c("pctSim","jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list(rownames(live), c("pctSim","jaccard"))))#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		print(sim)#
	}
colSums(liveCounts)
colSUms(deadCounts)
range(comm[1,] == colSums(liveCounts))
range(comm[2,] == colSums(deadCounts))
comm
nCommon
x
range(y == colSums(deadCounts))
range(x == colSums(liveCounts))
comm[,comm[1,] > 0 & comm[2,] > 0]
ncol(matrix(comm[,comm[1,] > 0 & comm[2,] > 0])) # common
ncol((comm[,comm[1,] > 0 & comm[2,] > 0])) # common
ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common
# drop empty species and sites#
dropEmpty <- function(live, dead) {#
	# drop empty species#
	temp1 <- colSums(live)#
	temp2 <- colSums(dead)#
	live <- live[, temp1 > 0 | temp2 > 0]#
	dead <- dead[, temp1 > 0 | temp2 > 0]#
	# drop empty sites#
	temp1 <- rowSums(live)#
	temp2 <- rowSums(dead)#
	live <- live[temp1 > 0 | temp2 > 0, ]#
	dead <- dead[temp1 > 0 | temp2 > 0, ]#
	return(list('live'=live, 'dead'=dead))#
}#
#
# Parse Data		#
parseData <- function(x, taxon, env, species, environments) {#
	if(env == "subtidal eel grass") {#
		myEnv <- "sub_eelgrass"#
	} else if(env == "intertidal sand flat") {#
		myEnv <- "inter_barren"#
	}#
	# select taxa#
	if(taxon != "all") {#
		xReduced <- x[,is.element(colnames(x), species$colName[species$Class == taxon])]#
	} else {#
		xReduced <- x#
	}#
	# select environment#
	if(env != "all") {#
		xReduced <- xReduced[environments[2,] == myEnv,]#
	}#
	return(xReduced)#
}#
#
simCalc <- function(live, dead) {#
	if(class(live) == "numeric") {#
		n <- 1#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list("1", c("pctSim","jaccard"))))#
	} else {#
		n <- nrow(live)#
		sim <- data.frame(matrix(NA, nrow=n, ncol=2, dimnames=list(rownames(live), c("pctSim","jaccard"))))#
	}#
	for(i in 1:n) {#
		if(class(live) == "numeric") {#
			x <- live #
			y <- dead#
		} else {#
			x <- live[i,] #
			y <- dead[i,]#
		}#
		comm <- rbind(x[x > 0 | y > 0], y[x > 0 | y > 0])#
		sim$pctSim[i] <- 2*sum(apply(comm, 2, min)) / (sum(comm[1,]) + sum(comm[2,]))#
		nCommon <- ncol(data.frame(comm[,comm[1,] > 0 & comm[2,] > 0])) # common#
		nTotal <- ncol(comm) # all present#
		sim$jaccard[i] <- nCommon / nTotal#
		print(sim)#
	}#
	return(sim)#
}
sim <- simCalc(colSums(tempLive()), colSums(tempDead()))
library(shiny)#
source("R/utils.r")#
#
ui <- fluidPage(#
#
	titlePanel("Live-Dead Analysis, Mugu Lagoon, California"),#
	sidebarLayout(#
#
		sidebarPanel(#
			h3("Make Selections"),#
			br(),#
			# select environment#
			selectInput(inputId = "enviro",#
				label = "Environment:",#
				choices = c("all","intertidal sand flat","subtidal eel grass"),#
				selected = "all"),#
			br(),#
			# select taxon#
			selectInput(inputId = "taxa",#
				label = "Taxon:",#
				choices = c("all","Bivalvia","Gastropoda"),#
				selected = "all"),#
			br(),	#
			# add more selections here#
			width=3,#
		),#
#
		mainPanel(#
			## Number of Sites, species and occurrences (live and dead)#
			h3("Counts of Live and Dead Individuals & Species"),		#
			fluidRow(#
				tableOutput(outputId = "env_stats")#
			), #
			## Live - Dead cross plots#
			fluidRow(#
				h3("Comparisons of Live and Death Assemblages"),#
				plotOutput(outputId = "liveDeadPlots", height = "500px", width = "1000px")#
			),#
			## aggregate Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death pooled assembalges"),#
				tableOutput(outputId = "liveDeadSimPooled")#
			),#
			## Live - Dead similarity#
			fluidRow(#
				h3("Similarity between live and death assembalges"),#
				plotOutput(outputId = "liveDeadSim", height = "500px", width = "1000px")#
			),#
			## Locality Map#
			fluidRow(#
				h3("Map of Mugu Lagoon with Sample Locations"),#
				strong("Click on Map to download a larger version."),#
				a(img(src='Warme1971_Map2.png', height = "805px", width = "1000px"), href="https://github.com/naheim/shinypaleo/blob/master/liveDead/www/Warme1971_Map2.png?raw=true"),#
			),#
			## Data table#
			fluidRow(#
				tableOutput(outputId = "livefile"),#
			), #
		)#
	)#
)#
#
server <- function(input, output, session) {#
	species <- read.delim(file="warmeSpecies.tsv")#
	species <- subset(species, Phylum == 'Mollusca') # include only mollusca#
	environments <- read.delim(file="warmeHeader.tsv")#
	liveIn <- read.delim(file="warmeLive.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	liveIn <- liveIn[,is.element(colnames(liveIn), species$colName) & !grepl("_sp", colnames(liveIn))]#
	# drop minor environments#
	liveIn <- liveIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	deadIn <- read.delim(file="warmeDead.tsv")#
	# drop non-molluscan taxa and those not identified to species#
	deadIn <- deadIn[,is.element(colnames(deadIn), species$colName) & !grepl("_sp", colnames(deadIn))]#
	# drop minor environments#
	deadIn <- deadIn[is.element(environments[2,], c("inter_barren","sub_eelgrass")),]#
	environments <- environments[,is.element(environments[2,], c("inter_barren","sub_eelgrass"))]#
	tempCounts <- dropEmpty(liveIn, deadIn)#
	liveCounts <- tempCounts$live#
	deadCounts <- tempCounts$dead#
	# Parse Data		#
	tempLive <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(liveCounts, input$taxa, input$enviro, species, environments)#
	})#
	tempDead <- reactive({#
		req(input$taxa, input$enviro)#
		parseData(deadCounts, input$taxa, input$enviro, species, environments)#
	})#
	# Get stats		#
	output$env_stats <- renderTable({#
		nLiveSite <- rowSums(tempLive())#
		nDeadSite <- rowSums(tempDead())#
		nLiveSp <- colSums(tempLive())#
		nDeadSp <- colSums(tempDead())#
		nSites <- c('live'=length(nLiveSite[nLiveSite > 0]), 'dead'=length(nDeadSite[nDeadSite > 0]))#
		nSpecies <- c('live'=length(nLiveSp[nLiveSp > 0]), 'dead'=length(nDeadSp[nDeadSp > 0]))#
		nOccur <- c('live'=sum(tempLive()), 'dead'=sum(tempDead()))#
		statTable <- rbind("Number of Sites"=nSites, "Number of Speices"=nSpecies, "Number of Occurrences"=nOccur)#
#
	}, rownames=TRUE)#
	# plot live vs. dead#
	output$liveDeadPlots <- renderPlot({#
		nLiveSite2 <- rowSums(tempLive())#
		nDeadSite2 <- rowSums(tempDead()) #
		nLiveSite <- nLiveSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nDeadSite <- nDeadSite2[nLiveSite2 > 0 & nDeadSite2 > 0] #
		nLiveSp2 <- colSums(tempLive())#
		nDeadSp2 <- colSums(tempDead())#
		nLiveSp <- nLiveSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		nDeadSp <- nDeadSp2[nLiveSp2 > 0 & nDeadSp2 > 0] #
		par(pch=16, mfrow=c(1,2), cex=1.5, las=1)#
		plot(nLiveSp, nDeadSp, xlab="Number of live species", ylab="Number of dead species", main="Species", log="xy")#
		abline(a=0, b=1, lty=2)#
		plot(nLiveSite, nDeadSite, xlab="Number of live specimens", ylab="Number of dead specimens", main="Specimens", log="xy")#
		abline(a=0, b=1, lty=2)#
	})#
	# pooled similarity#
	output$liveDeadSimPooled <- renderTable({#
		sim <- simCalc(colSums(tempLive()), colSums(tempDead()))#
		sim2 <- data.frame("Percent Similarity"=sim$pctSim, "Jaccard Similarity"=sim$jaccard)#
	}, rownames=FALSE)#
	# plot similarity#
	output$liveDeadSim <- renderPlot({#
		sim <- simCalc(tempLive(), tempDead())#
		par(pch=16, cex.axis=1.5, cex.lab=1.5, las=1, mfrow=c(1,2))#
		hist(sim$pctSim, breaks=seq(0,1,0.1), xlab="Percent similarity", ylab="Number of sites", main="Similarity-Abundance")#
		box()#
		hist(sim$jaccard, breaks=seq(0,1,0.1), xlab="Jaccard similarity index", ylab="Number of sites", main="Similarity-Species")#
		box()#
	})#
	output$livefile <- renderTable(liveCounts, rownames=TRUE)  #
}#
#
shinyApp(ui = ui, server = server)
runGitHub("shinypaleo", "naheim", subdir="liveDead")
runGitHub("shinypaleo", "naheim", subdir="liveDead")
q()
